// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: events.proto

package api_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RewardEvent_Role int32

const (
	RewardEvent_Validator  RewardEvent_Role = 0
	RewardEvent_Delegator  RewardEvent_Role = 1
	RewardEvent_DAO        RewardEvent_Role = 2
	RewardEvent_Developers RewardEvent_Role = 3
)

// Enum value maps for RewardEvent_Role.
var (
	RewardEvent_Role_name = map[int32]string{
		0: "Validator",
		1: "Delegator",
		2: "DAO",
		3: "Developers",
	}
	RewardEvent_Role_value = map[string]int32{
		"Validator":  0,
		"Delegator":  1,
		"DAO":        2,
		"Developers": 3,
	}
)

func (x RewardEvent_Role) Enum() *RewardEvent_Role {
	p := new(RewardEvent_Role)
	*p = x
	return p
}

func (x RewardEvent_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardEvent_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_events_proto_enumTypes[0].Descriptor()
}

func (RewardEvent_Role) Type() protoreflect.EnumType {
	return &file_events_proto_enumTypes[0]
}

func (x RewardEvent_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RewardEvent_Role.Descriptor instead.
func (RewardEvent_Role) EnumDescriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{2, 0}
}

type JailEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorPubKey string `protobuf:"bytes,1,opt,name=validator_pub_key,json=validatorPubKey,proto3" json:"validator_pub_key,omitempty"`
	JailedUntil     uint64 `protobuf:"varint,2,opt,name=jailed_until,json=jailedUntil,proto3" json:"jailed_until,omitempty"`
}

func (x *JailEvent) Reset() {
	*x = JailEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JailEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JailEvent) ProtoMessage() {}

func (x *JailEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JailEvent.ProtoReflect.Descriptor instead.
func (*JailEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{0}
}

func (x *JailEvent) GetValidatorPubKey() string {
	if x != nil {
		return x.ValidatorPubKey
	}
	return ""
}

func (x *JailEvent) GetJailedUntil() uint64 {
	if x != nil {
		return x.JailedUntil
	}
	return 0
}

type RemoveCandidateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CandidatePubKey string `protobuf:"bytes,1,opt,name=candidate_pub_key,json=candidatePubKey,proto3" json:"candidate_pub_key,omitempty"`
}

func (x *RemoveCandidateEvent) Reset() {
	*x = RemoveCandidateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCandidateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCandidateEvent) ProtoMessage() {}

func (x *RemoveCandidateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCandidateEvent.ProtoReflect.Descriptor instead.
func (*RemoveCandidateEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{1}
}

func (x *RemoveCandidateEvent) GetCandidatePubKey() string {
	if x != nil {
		return x.CandidatePubKey
	}
	return ""
}

type RewardEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role            RewardEvent_Role `protobuf:"varint,1,opt,name=role,proto3,enum=api_pb.RewardEvent_Role" json:"role,omitempty"`
	Address         string           `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Amount          string           `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	ValidatorPubKey string           `protobuf:"bytes,4,opt,name=validator_pub_key,json=validatorPubKey,proto3" json:"validator_pub_key,omitempty"`
	// coin for which the delegator received the reward
	ForCoin uint64 `protobuf:"varint,6,opt,name=for_coin,json=forCoin,proto3" json:"for_coin,omitempty"`
}

func (x *RewardEvent) Reset() {
	*x = RewardEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardEvent) ProtoMessage() {}

func (x *RewardEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardEvent.ProtoReflect.Descriptor instead.
func (*RewardEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{2}
}

func (x *RewardEvent) GetRole() RewardEvent_Role {
	if x != nil {
		return x.Role
	}
	return RewardEvent_Validator
}

func (x *RewardEvent) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RewardEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *RewardEvent) GetValidatorPubKey() string {
	if x != nil {
		return x.ValidatorPubKey
	}
	return ""
}

func (x *RewardEvent) GetForCoin() uint64 {
	if x != nil {
		return x.ForCoin
	}
	return 0
}

type SlashEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount          string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Coin            uint64 `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
	ValidatorPubKey string `protobuf:"bytes,4,opt,name=validator_pub_key,json=validatorPubKey,proto3" json:"validator_pub_key,omitempty"`
}

func (x *SlashEvent) Reset() {
	*x = SlashEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlashEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlashEvent) ProtoMessage() {}

func (x *SlashEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlashEvent.ProtoReflect.Descriptor instead.
func (*SlashEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{3}
}

func (x *SlashEvent) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SlashEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SlashEvent) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *SlashEvent) GetValidatorPubKey() string {
	if x != nil {
		return x.ValidatorPubKey
	}
	return ""
}

type UnbondEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount          string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Coin            uint64 `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
	ValidatorPubKey string `protobuf:"bytes,4,opt,name=validator_pub_key,json=validatorPubKey,proto3" json:"validator_pub_key,omitempty"`
}

func (x *UnbondEvent) Reset() {
	*x = UnbondEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbondEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbondEvent) ProtoMessage() {}

func (x *UnbondEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbondEvent.ProtoReflect.Descriptor instead.
func (*UnbondEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{4}
}

func (x *UnbondEvent) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UnbondEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UnbondEvent) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *UnbondEvent) GetValidatorPubKey() string {
	if x != nil {
		return x.ValidatorPubKey
	}
	return ""
}

type StakeKickEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount          string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Coin            uint64 `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
	ValidatorPubKey string `protobuf:"bytes,4,opt,name=validator_pub_key,json=validatorPubKey,proto3" json:"validator_pub_key,omitempty"`
}

func (x *StakeKickEvent) Reset() {
	*x = StakeKickEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeKickEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeKickEvent) ProtoMessage() {}

func (x *StakeKickEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeKickEvent.ProtoReflect.Descriptor instead.
func (*StakeKickEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{5}
}

func (x *StakeKickEvent) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *StakeKickEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StakeKickEvent) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *StakeKickEvent) GetValidatorPubKey() string {
	if x != nil {
		return x.ValidatorPubKey
	}
	return ""
}

type UpdateNetworkEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateNetworkEvent) Reset() {
	*x = UpdateNetworkEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNetworkEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetworkEvent) ProtoMessage() {}

func (x *UpdateNetworkEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetworkEvent.ProtoReflect.Descriptor instead.
func (*UpdateNetworkEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateNetworkEvent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type UpdateCommissionsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin                    uint64 `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
	PayloadByte             string `protobuf:"bytes,4,opt,name=payload_byte,json=payloadByte,proto3" json:"payload_byte,omitempty"`
	Send                    string `protobuf:"bytes,5,opt,name=send,proto3" json:"send,omitempty"`
	BuyBancor               string `protobuf:"bytes,38,opt,name=buy_bancor,json=buyBancor,proto3" json:"buy_bancor,omitempty"`
	SellBancor              string `protobuf:"bytes,39,opt,name=sell_bancor,json=sellBancor,proto3" json:"sell_bancor,omitempty"`
	SellAllBancor           string `protobuf:"bytes,40,opt,name=sell_all_bancor,json=sellAllBancor,proto3" json:"sell_all_bancor,omitempty"`
	BuyPoolBase             string `protobuf:"bytes,41,opt,name=buy_pool_base,json=buyPoolBase,proto3" json:"buy_pool_base,omitempty"`
	BuyPoolDelta            string `protobuf:"bytes,53,opt,name=buy_pool_delta,json=buyPoolDelta,proto3" json:"buy_pool_delta,omitempty"`
	SellPoolBase            string `protobuf:"bytes,42,opt,name=sell_pool_base,json=sellPoolBase,proto3" json:"sell_pool_base,omitempty"`
	SellPoolDelta           string `protobuf:"bytes,54,opt,name=sell_pool_delta,json=sellPoolDelta,proto3" json:"sell_pool_delta,omitempty"`
	SellAllPoolBase         string `protobuf:"bytes,43,opt,name=sell_all_pool_base,json=sellAllPoolBase,proto3" json:"sell_all_pool_base,omitempty"`
	SellAllPoolDelta        string `protobuf:"bytes,55,opt,name=sell_all_pool_delta,json=sellAllPoolDelta,proto3" json:"sell_all_pool_delta,omitempty"`
	CreateTicker3           string `protobuf:"bytes,7,opt,name=create_ticker3,json=createTicker3,proto3" json:"create_ticker3,omitempty"`
	CreateTicker4           string `protobuf:"bytes,8,opt,name=create_ticker4,json=createTicker4,proto3" json:"create_ticker4,omitempty"`
	CreateTicker5           string `protobuf:"bytes,9,opt,name=create_ticker5,json=createTicker5,proto3" json:"create_ticker5,omitempty"`
	CreateTicker6           string `protobuf:"bytes,10,opt,name=create_ticker6,json=createTicker6,proto3" json:"create_ticker6,omitempty"`
	CreateTicker7_10        string `protobuf:"bytes,11,opt,name=create_ticker7_10,json=createTicker710,proto3" json:"create_ticker7_10,omitempty"`
	CreateCoin              string `protobuf:"bytes,34,opt,name=create_coin,json=createCoin,proto3" json:"create_coin,omitempty"`
	CreateToken             string `protobuf:"bytes,35,opt,name=create_token,json=createToken,proto3" json:"create_token,omitempty"`
	RecreateCoin            string `protobuf:"bytes,36,opt,name=recreate_coin,json=recreateCoin,proto3" json:"recreate_coin,omitempty"`
	RecreateToken           string `protobuf:"bytes,37,opt,name=recreate_token,json=recreateToken,proto3" json:"recreate_token,omitempty"`
	DeclareCandidacy        string `protobuf:"bytes,13,opt,name=declare_candidacy,json=declareCandidacy,proto3" json:"declare_candidacy,omitempty"`
	Delegate                string `protobuf:"bytes,14,opt,name=delegate,proto3" json:"delegate,omitempty"`
	Unbond                  string `protobuf:"bytes,15,opt,name=unbond,proto3" json:"unbond,omitempty"`
	RedeemCheck             string `protobuf:"bytes,16,opt,name=redeem_check,json=redeemCheck,proto3" json:"redeem_check,omitempty"`
	SetCandidateOn          string `protobuf:"bytes,44,opt,name=set_candidate_on,json=setCandidateOn,proto3" json:"set_candidate_on,omitempty"`
	SetCandidateOff         string `protobuf:"bytes,45,opt,name=set_candidate_off,json=setCandidateOff,proto3" json:"set_candidate_off,omitempty"`
	CreateMultisig          string `protobuf:"bytes,18,opt,name=create_multisig,json=createMultisig,proto3" json:"create_multisig,omitempty"`
	MultisendBase           string `protobuf:"bytes,51,opt,name=multisend_base,json=multisendBase,proto3" json:"multisend_base,omitempty"`
	MultisendDelta          string `protobuf:"bytes,52,opt,name=multisend_delta,json=multisendDelta,proto3" json:"multisend_delta,omitempty"`
	EditCandidate           string `protobuf:"bytes,20,opt,name=edit_candidate,json=editCandidate,proto3" json:"edit_candidate,omitempty"`
	SetHaltBlock            string `protobuf:"bytes,21,opt,name=set_halt_block,json=setHaltBlock,proto3" json:"set_halt_block,omitempty"`
	EditTickerOwner         string `protobuf:"bytes,22,opt,name=edit_ticker_owner,json=editTickerOwner,proto3" json:"edit_ticker_owner,omitempty"`
	EditMultisig            string `protobuf:"bytes,23,opt,name=edit_multisig,json=editMultisig,proto3" json:"edit_multisig,omitempty"`
	EditCandidatePublicKey  string `protobuf:"bytes,25,opt,name=edit_candidate_public_key,json=editCandidatePublicKey,proto3" json:"edit_candidate_public_key,omitempty"`
	CreateSwapPool          string `protobuf:"bytes,48,opt,name=create_swap_pool,json=createSwapPool,proto3" json:"create_swap_pool,omitempty"`
	AddLiquidity            string `protobuf:"bytes,49,opt,name=add_liquidity,json=addLiquidity,proto3" json:"add_liquidity,omitempty"`
	RemoveLiquidity         string `protobuf:"bytes,50,opt,name=remove_liquidity,json=removeLiquidity,proto3" json:"remove_liquidity,omitempty"`
	EditCandidateCommission string `protobuf:"bytes,28,opt,name=edit_candidate_commission,json=editCandidateCommission,proto3" json:"edit_candidate_commission,omitempty"`
	MintToken               string `protobuf:"bytes,46,opt,name=mint_token,json=mintToken,proto3" json:"mint_token,omitempty"`
	BurnToken               string `protobuf:"bytes,47,opt,name=burn_token,json=burnToken,proto3" json:"burn_token,omitempty"`
	VoteCommission          string `protobuf:"bytes,31,opt,name=vote_commission,json=voteCommission,proto3" json:"vote_commission,omitempty"`
	VoteUpdate              string `protobuf:"bytes,32,opt,name=vote_update,json=voteUpdate,proto3" json:"vote_update,omitempty"`
	FailedTx                string `protobuf:"bytes,56,opt,name=failed_tx,json=failedTx,proto3" json:"failed_tx,omitempty"`
	AddLimitOrder           string `protobuf:"bytes,57,opt,name=add_limit_order,json=addLimitOrder,proto3" json:"add_limit_order,omitempty"`
	RemoveLimitOrder        string `protobuf:"bytes,58,opt,name=remove_limit_order,json=removeLimitOrder,proto3" json:"remove_limit_order,omitempty"`
	MoveStake               string `protobuf:"bytes,59,opt,name=move_stake,json=moveStake,proto3" json:"move_stake,omitempty"`
	LockStake               string `protobuf:"bytes,60,opt,name=lock_stake,json=lockStake,proto3" json:"lock_stake,omitempty"`
	Lock                    string `protobuf:"bytes,61,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (x *UpdateCommissionsEvent) Reset() {
	*x = UpdateCommissionsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommissionsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommissionsEvent) ProtoMessage() {}

func (x *UpdateCommissionsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommissionsEvent.ProtoReflect.Descriptor instead.
func (*UpdateCommissionsEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCommissionsEvent) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *UpdateCommissionsEvent) GetPayloadByte() string {
	if x != nil {
		return x.PayloadByte
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetSend() string {
	if x != nil {
		return x.Send
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetBuyBancor() string {
	if x != nil {
		return x.BuyBancor
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetSellBancor() string {
	if x != nil {
		return x.SellBancor
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetSellAllBancor() string {
	if x != nil {
		return x.SellAllBancor
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetBuyPoolBase() string {
	if x != nil {
		return x.BuyPoolBase
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetBuyPoolDelta() string {
	if x != nil {
		return x.BuyPoolDelta
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetSellPoolBase() string {
	if x != nil {
		return x.SellPoolBase
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetSellPoolDelta() string {
	if x != nil {
		return x.SellPoolDelta
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetSellAllPoolBase() string {
	if x != nil {
		return x.SellAllPoolBase
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetSellAllPoolDelta() string {
	if x != nil {
		return x.SellAllPoolDelta
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetCreateTicker3() string {
	if x != nil {
		return x.CreateTicker3
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetCreateTicker4() string {
	if x != nil {
		return x.CreateTicker4
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetCreateTicker5() string {
	if x != nil {
		return x.CreateTicker5
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetCreateTicker6() string {
	if x != nil {
		return x.CreateTicker6
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetCreateTicker7_10() string {
	if x != nil {
		return x.CreateTicker7_10
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetCreateCoin() string {
	if x != nil {
		return x.CreateCoin
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetCreateToken() string {
	if x != nil {
		return x.CreateToken
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetRecreateCoin() string {
	if x != nil {
		return x.RecreateCoin
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetRecreateToken() string {
	if x != nil {
		return x.RecreateToken
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetDeclareCandidacy() string {
	if x != nil {
		return x.DeclareCandidacy
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetDelegate() string {
	if x != nil {
		return x.Delegate
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetUnbond() string {
	if x != nil {
		return x.Unbond
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetRedeemCheck() string {
	if x != nil {
		return x.RedeemCheck
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetSetCandidateOn() string {
	if x != nil {
		return x.SetCandidateOn
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetSetCandidateOff() string {
	if x != nil {
		return x.SetCandidateOff
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetCreateMultisig() string {
	if x != nil {
		return x.CreateMultisig
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetMultisendBase() string {
	if x != nil {
		return x.MultisendBase
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetMultisendDelta() string {
	if x != nil {
		return x.MultisendDelta
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetEditCandidate() string {
	if x != nil {
		return x.EditCandidate
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetSetHaltBlock() string {
	if x != nil {
		return x.SetHaltBlock
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetEditTickerOwner() string {
	if x != nil {
		return x.EditTickerOwner
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetEditMultisig() string {
	if x != nil {
		return x.EditMultisig
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetEditCandidatePublicKey() string {
	if x != nil {
		return x.EditCandidatePublicKey
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetCreateSwapPool() string {
	if x != nil {
		return x.CreateSwapPool
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetAddLiquidity() string {
	if x != nil {
		return x.AddLiquidity
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetRemoveLiquidity() string {
	if x != nil {
		return x.RemoveLiquidity
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetEditCandidateCommission() string {
	if x != nil {
		return x.EditCandidateCommission
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetMintToken() string {
	if x != nil {
		return x.MintToken
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetBurnToken() string {
	if x != nil {
		return x.BurnToken
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetVoteCommission() string {
	if x != nil {
		return x.VoteCommission
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetVoteUpdate() string {
	if x != nil {
		return x.VoteUpdate
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetFailedTx() string {
	if x != nil {
		return x.FailedTx
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetAddLimitOrder() string {
	if x != nil {
		return x.AddLimitOrder
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetRemoveLimitOrder() string {
	if x != nil {
		return x.RemoveLimitOrder
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetMoveStake() string {
	if x != nil {
		return x.MoveStake
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetLockStake() string {
	if x != nil {
		return x.LockStake
	}
	return ""
}

func (x *UpdateCommissionsEvent) GetLock() string {
	if x != nil {
		return x.Lock
	}
	return ""
}

type OrderExpiredEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Coin    uint64 `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
	Amount  string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *OrderExpiredEvent) Reset() {
	*x = OrderExpiredEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderExpiredEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderExpiredEvent) ProtoMessage() {}

func (x *OrderExpiredEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderExpiredEvent.ProtoReflect.Descriptor instead.
func (*OrderExpiredEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{8}
}

func (x *OrderExpiredEvent) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderExpiredEvent) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OrderExpiredEvent) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *OrderExpiredEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type UpdatedBlockRewardEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value                   string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ValueLockedStakeRewards string `protobuf:"bytes,2,opt,name=value_locked_stake_rewards,json=valueLockedStakeRewards,proto3" json:"value_locked_stake_rewards,omitempty"`
}

func (x *UpdatedBlockRewardEvent) Reset() {
	*x = UpdatedBlockRewardEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedBlockRewardEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedBlockRewardEvent) ProtoMessage() {}

func (x *UpdatedBlockRewardEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedBlockRewardEvent.ProtoReflect.Descriptor instead.
func (*UpdatedBlockRewardEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{9}
}

func (x *UpdatedBlockRewardEvent) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdatedBlockRewardEvent) GetValueLockedStakeRewards() string {
	if x != nil {
		return x.ValueLockedStakeRewards
	}
	return ""
}

type StakeMoveEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address           string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount            string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Coin              uint64 `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
	CandidatePubKey   string `protobuf:"bytes,4,opt,name=candidate_pub_key,json=candidatePubKey,proto3" json:"candidate_pub_key,omitempty"`
	ToCandidatePubKey string `protobuf:"bytes,5,opt,name=to_candidate_pub_key,json=toCandidatePubKey,proto3" json:"to_candidate_pub_key,omitempty"`
}

func (x *StakeMoveEvent) Reset() {
	*x = StakeMoveEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeMoveEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeMoveEvent) ProtoMessage() {}

func (x *StakeMoveEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeMoveEvent.ProtoReflect.Descriptor instead.
func (*StakeMoveEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{10}
}

func (x *StakeMoveEvent) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *StakeMoveEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StakeMoveEvent) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *StakeMoveEvent) GetCandidatePubKey() string {
	if x != nil {
		return x.CandidatePubKey
	}
	return ""
}

func (x *StakeMoveEvent) GetToCandidatePubKey() string {
	if x != nil {
		return x.ToCandidatePubKey
	}
	return ""
}

type UnlockEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Coin    uint64 `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (x *UnlockEvent) Reset() {
	*x = UnlockEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockEvent) ProtoMessage() {}

func (x *UnlockEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockEvent.ProtoReflect.Descriptor instead.
func (*UnlockEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{11}
}

func (x *UnlockEvent) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UnlockEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UnlockEvent) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

var File_events_proto protoreflect.FileDescriptor

var file_events_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x22, 0x5a, 0x0a, 0x09, 0x4a, 0x61, 0x69, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x6a, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6a, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x22, 0x42, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0xf3, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x3d, 0x0a,
	0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x4f, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x10, 0x03, 0x22, 0x7e, 0x0a, 0x0a,
	0x53, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75,
	0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x7f, 0x0a, 0x0b,
	0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70,
	0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x82, 0x01,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x22, 0x2e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xc6, 0x0e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f,
	0x62, 0x61, 0x6e, 0x63, 0x6f, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75,
	0x79, 0x42, 0x61, 0x6e, 0x63, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x62, 0x61, 0x6e, 0x63, 0x6f, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x6c, 0x42, 0x61, 0x6e, 0x63, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x63, 0x6f, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x6e, 0x63, 0x6f, 0x72,
	0x12, 0x22, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x50, 0x6f, 0x6f, 0x6c,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75,
	0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65,
	0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x50,
	0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x6f,
	0x6c, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x33, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x34, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x34, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x35, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x36,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x37, 0x5f, 0x31, 0x30, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x37, 0x31, 0x30, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x63,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65,
	0x74, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65,
	0x6e, 0x64, 0x42, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x61,
	0x6c, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x74, 0x48, 0x61, 0x6c, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x39, 0x0a,
	0x19, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x76, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x74, 0x78, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x54, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64,
	0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x69, 0x0a, 0x11, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4d, 0x6f,
	0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x5f,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6f, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x53, 0x0a, 0x0b, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x42,
	0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x67, 0x72,
	0x70, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x3b, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_events_proto_rawDescOnce sync.Once
	file_events_proto_rawDescData = file_events_proto_rawDesc
)

func file_events_proto_rawDescGZIP() []byte {
	file_events_proto_rawDescOnce.Do(func() {
		file_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_events_proto_rawDescData)
	})
	return file_events_proto_rawDescData
}

var file_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_events_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_events_proto_goTypes = []interface{}{
	(RewardEvent_Role)(0),           // 0: api_pb.RewardEvent.Role
	(*JailEvent)(nil),               // 1: api_pb.JailEvent
	(*RemoveCandidateEvent)(nil),    // 2: api_pb.RemoveCandidateEvent
	(*RewardEvent)(nil),             // 3: api_pb.RewardEvent
	(*SlashEvent)(nil),              // 4: api_pb.SlashEvent
	(*UnbondEvent)(nil),             // 5: api_pb.UnbondEvent
	(*StakeKickEvent)(nil),          // 6: api_pb.StakeKickEvent
	(*UpdateNetworkEvent)(nil),      // 7: api_pb.UpdateNetworkEvent
	(*UpdateCommissionsEvent)(nil),  // 8: api_pb.UpdateCommissionsEvent
	(*OrderExpiredEvent)(nil),       // 9: api_pb.OrderExpiredEvent
	(*UpdatedBlockRewardEvent)(nil), // 10: api_pb.UpdatedBlockRewardEvent
	(*StakeMoveEvent)(nil),          // 11: api_pb.StakeMoveEvent
	(*UnlockEvent)(nil),             // 12: api_pb.UnlockEvent
}
var file_events_proto_depIdxs = []int32{
	0, // 0: api_pb.RewardEvent.role:type_name -> api_pb.RewardEvent.Role
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_events_proto_init() }
func file_events_proto_init() {
	if File_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JailEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCandidateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlashEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbondEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeKickEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNetworkEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCommissionsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderExpiredEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatedBlockRewardEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeMoveEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_events_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_events_proto_goTypes,
		DependencyIndexes: file_events_proto_depIdxs,
		EnumInfos:         file_events_proto_enumTypes,
		MessageInfos:      file_events_proto_msgTypes,
	}.Build()
	File_events_proto = out.File
	file_events_proto_rawDesc = nil
	file_events_proto_goTypes = nil
	file_events_proto_depIdxs = nil
}
