// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: data.proto

package api_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin  *Coin  `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	To    string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SendData) Reset() {
	*x = SendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendData) ProtoMessage() {}

func (x *SendData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendData.ProtoReflect.Descriptor instead.
func (*SendData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0}
}

func (x *SendData) GetCoin() *Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *SendData) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SendData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SellCoinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinToSell        *Coin  `protobuf:"bytes,1,opt,name=coin_to_sell,json=coinToSell,proto3" json:"coin_to_sell,omitempty"`
	ValueToSell       string `protobuf:"bytes,2,opt,name=value_to_sell,json=valueToSell,proto3" json:"value_to_sell,omitempty"`
	CoinToBuy         *Coin  `protobuf:"bytes,3,opt,name=coin_to_buy,json=coinToBuy,proto3" json:"coin_to_buy,omitempty"`
	MinimumValueToBuy string `protobuf:"bytes,4,opt,name=minimum_value_to_buy,json=minimumValueToBuy,proto3" json:"minimum_value_to_buy,omitempty"`
}

func (x *SellCoinData) Reset() {
	*x = SellCoinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellCoinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellCoinData) ProtoMessage() {}

func (x *SellCoinData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellCoinData.ProtoReflect.Descriptor instead.
func (*SellCoinData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1}
}

func (x *SellCoinData) GetCoinToSell() *Coin {
	if x != nil {
		return x.CoinToSell
	}
	return nil
}

func (x *SellCoinData) GetValueToSell() string {
	if x != nil {
		return x.ValueToSell
	}
	return ""
}

func (x *SellCoinData) GetCoinToBuy() *Coin {
	if x != nil {
		return x.CoinToBuy
	}
	return nil
}

func (x *SellCoinData) GetMinimumValueToBuy() string {
	if x != nil {
		return x.MinimumValueToBuy
	}
	return ""
}

type SellAllCoinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinToSell        *Coin  `protobuf:"bytes,1,opt,name=coin_to_sell,json=coinToSell,proto3" json:"coin_to_sell,omitempty"`
	CoinToBuy         *Coin  `protobuf:"bytes,2,opt,name=coin_to_buy,json=coinToBuy,proto3" json:"coin_to_buy,omitempty"`
	MinimumValueToBuy string `protobuf:"bytes,3,opt,name=minimum_value_to_buy,json=minimumValueToBuy,proto3" json:"minimum_value_to_buy,omitempty"`
}

func (x *SellAllCoinData) Reset() {
	*x = SellAllCoinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellAllCoinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellAllCoinData) ProtoMessage() {}

func (x *SellAllCoinData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellAllCoinData.ProtoReflect.Descriptor instead.
func (*SellAllCoinData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{2}
}

func (x *SellAllCoinData) GetCoinToSell() *Coin {
	if x != nil {
		return x.CoinToSell
	}
	return nil
}

func (x *SellAllCoinData) GetCoinToBuy() *Coin {
	if x != nil {
		return x.CoinToBuy
	}
	return nil
}

func (x *SellAllCoinData) GetMinimumValueToBuy() string {
	if x != nil {
		return x.MinimumValueToBuy
	}
	return ""
}

type BuyCoinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinToBuy          *Coin  `protobuf:"bytes,1,opt,name=coin_to_buy,json=coinToBuy,proto3" json:"coin_to_buy,omitempty"`
	ValueToBuy         string `protobuf:"bytes,2,opt,name=value_to_buy,json=valueToBuy,proto3" json:"value_to_buy,omitempty"`
	CoinToSell         *Coin  `protobuf:"bytes,3,opt,name=coin_to_sell,json=coinToSell,proto3" json:"coin_to_sell,omitempty"`
	MaximumValueToSell string `protobuf:"bytes,4,opt,name=maximum_value_to_sell,json=maximumValueToSell,proto3" json:"maximum_value_to_sell,omitempty"`
}

func (x *BuyCoinData) Reset() {
	*x = BuyCoinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyCoinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyCoinData) ProtoMessage() {}

func (x *BuyCoinData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyCoinData.ProtoReflect.Descriptor instead.
func (*BuyCoinData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3}
}

func (x *BuyCoinData) GetCoinToBuy() *Coin {
	if x != nil {
		return x.CoinToBuy
	}
	return nil
}

func (x *BuyCoinData) GetValueToBuy() string {
	if x != nil {
		return x.ValueToBuy
	}
	return ""
}

func (x *BuyCoinData) GetCoinToSell() *Coin {
	if x != nil {
		return x.CoinToSell
	}
	return nil
}

func (x *BuyCoinData) GetMaximumValueToSell() string {
	if x != nil {
		return x.MaximumValueToSell
	}
	return ""
}

type CreateCoinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol               string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	InitialAmount        string `protobuf:"bytes,3,opt,name=initial_amount,json=initialAmount,proto3" json:"initial_amount,omitempty"`
	InitialReserve       string `protobuf:"bytes,4,opt,name=initial_reserve,json=initialReserve,proto3" json:"initial_reserve,omitempty"`
	ConstantReserveRatio uint64 `protobuf:"varint,5,opt,name=constant_reserve_ratio,json=constantReserveRatio,proto3" json:"constant_reserve_ratio,omitempty"`
	MaxSupply            string `protobuf:"bytes,6,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
}

func (x *CreateCoinData) Reset() {
	*x = CreateCoinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinData) ProtoMessage() {}

func (x *CreateCoinData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinData.ProtoReflect.Descriptor instead.
func (*CreateCoinData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCoinData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCoinData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CreateCoinData) GetInitialAmount() string {
	if x != nil {
		return x.InitialAmount
	}
	return ""
}

func (x *CreateCoinData) GetInitialReserve() string {
	if x != nil {
		return x.InitialReserve
	}
	return ""
}

func (x *CreateCoinData) GetConstantReserveRatio() uint64 {
	if x != nil {
		return x.ConstantReserveRatio
	}
	return 0
}

func (x *CreateCoinData) GetMaxSupply() string {
	if x != nil {
		return x.MaxSupply
	}
	return ""
}

type DeclareCandidacyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PubKey     string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Commission uint64 `protobuf:"varint,3,opt,name=commission,proto3" json:"commission,omitempty"`
	Coin       *Coin  `protobuf:"bytes,4,opt,name=coin,proto3" json:"coin,omitempty"`
	Stake      string `protobuf:"bytes,5,opt,name=stake,proto3" json:"stake,omitempty"`
}

func (x *DeclareCandidacyData) Reset() {
	*x = DeclareCandidacyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclareCandidacyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareCandidacyData) ProtoMessage() {}

func (x *DeclareCandidacyData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareCandidacyData.ProtoReflect.Descriptor instead.
func (*DeclareCandidacyData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5}
}

func (x *DeclareCandidacyData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DeclareCandidacyData) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *DeclareCandidacyData) GetCommission() uint64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *DeclareCandidacyData) GetCoin() *Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *DeclareCandidacyData) GetStake() string {
	if x != nil {
		return x.Stake
	}
	return ""
}

type DelegateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey string `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Coin   *Coin  `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin,omitempty"`
	Value  string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DelegateData) Reset() {
	*x = DelegateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateData) ProtoMessage() {}

func (x *DelegateData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateData.ProtoReflect.Descriptor instead.
func (*DelegateData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{6}
}

func (x *DelegateData) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *DelegateData) GetCoin() *Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *DelegateData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type UnbondData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey string `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Coin   *Coin  `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin,omitempty"`
	Value  string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UnbondData) Reset() {
	*x = UnbondData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbondData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbondData) ProtoMessage() {}

func (x *UnbondData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbondData.ProtoReflect.Descriptor instead.
func (*UnbondData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{7}
}

func (x *UnbondData) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *UnbondData) GetCoin() *Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *UnbondData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RedeemCheckData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawCheck string `protobuf:"bytes,1,opt,name=raw_check,json=rawCheck,proto3" json:"raw_check,omitempty"`
	Proof    string `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *RedeemCheckData) Reset() {
	*x = RedeemCheckData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedeemCheckData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemCheckData) ProtoMessage() {}

func (x *RedeemCheckData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemCheckData.ProtoReflect.Descriptor instead.
func (*RedeemCheckData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{8}
}

func (x *RedeemCheckData) GetRawCheck() string {
	if x != nil {
		return x.RawCheck
	}
	return ""
}

func (x *RedeemCheckData) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

type SetCandidateOnData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey string `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (x *SetCandidateOnData) Reset() {
	*x = SetCandidateOnData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCandidateOnData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCandidateOnData) ProtoMessage() {}

func (x *SetCandidateOnData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCandidateOnData.ProtoReflect.Descriptor instead.
func (*SetCandidateOnData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9}
}

func (x *SetCandidateOnData) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

type SetCandidateOffData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey string `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (x *SetCandidateOffData) Reset() {
	*x = SetCandidateOffData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCandidateOffData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCandidateOffData) ProtoMessage() {}

func (x *SetCandidateOffData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCandidateOffData.ProtoReflect.Descriptor instead.
func (*SetCandidateOffData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{10}
}

func (x *SetCandidateOffData) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

type CreateMultisigData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold uint64   `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Weights   []uint64 `protobuf:"varint,2,rep,packed,name=weights,proto3" json:"weights,omitempty"`
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *CreateMultisigData) Reset() {
	*x = CreateMultisigData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultisigData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultisigData) ProtoMessage() {}

func (x *CreateMultisigData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultisigData.ProtoReflect.Descriptor instead.
func (*CreateMultisigData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{11}
}

func (x *CreateMultisigData) GetThreshold() uint64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *CreateMultisigData) GetWeights() []uint64 {
	if x != nil {
		return x.Weights
	}
	return nil
}

func (x *CreateMultisigData) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type MultiSendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SendData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MultiSendData) Reset() {
	*x = MultiSendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSendData) ProtoMessage() {}

func (x *MultiSendData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSendData.ProtoReflect.Descriptor instead.
func (*MultiSendData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{12}
}

func (x *MultiSendData) GetList() []*SendData {
	if x != nil {
		return x.List
	}
	return nil
}

type EditCandidateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey         string `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	RewardAddress  string `protobuf:"bytes,3,opt,name=reward_address,json=rewardAddress,proto3" json:"reward_address,omitempty"`
	OwnerAddress   string `protobuf:"bytes,4,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	ControlAddress string `protobuf:"bytes,5,opt,name=control_address,json=controlAddress,proto3" json:"control_address,omitempty"`
}

func (x *EditCandidateData) Reset() {
	*x = EditCandidateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditCandidateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCandidateData) ProtoMessage() {}

func (x *EditCandidateData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCandidateData.ProtoReflect.Descriptor instead.
func (*EditCandidateData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{13}
}

func (x *EditCandidateData) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *EditCandidateData) GetRewardAddress() string {
	if x != nil {
		return x.RewardAddress
	}
	return ""
}

func (x *EditCandidateData) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

func (x *EditCandidateData) GetControlAddress() string {
	if x != nil {
		return x.ControlAddress
	}
	return ""
}

type SetHaltBlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey string `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *SetHaltBlockData) Reset() {
	*x = SetHaltBlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHaltBlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHaltBlockData) ProtoMessage() {}

func (x *SetHaltBlockData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHaltBlockData.ProtoReflect.Descriptor instead.
func (*SetHaltBlockData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{14}
}

func (x *SetHaltBlockData) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *SetHaltBlockData) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type RecreateCoinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol               string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	InitialAmount        string `protobuf:"bytes,3,opt,name=initial_amount,json=initialAmount,proto3" json:"initial_amount,omitempty"`
	InitialReserve       string `protobuf:"bytes,4,opt,name=initial_reserve,json=initialReserve,proto3" json:"initial_reserve,omitempty"`
	ConstantReserveRatio uint64 `protobuf:"varint,5,opt,name=constant_reserve_ratio,json=constantReserveRatio,proto3" json:"constant_reserve_ratio,omitempty"`
	MaxSupply            string `protobuf:"bytes,6,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
}

func (x *RecreateCoinData) Reset() {
	*x = RecreateCoinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecreateCoinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecreateCoinData) ProtoMessage() {}

func (x *RecreateCoinData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecreateCoinData.ProtoReflect.Descriptor instead.
func (*RecreateCoinData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{15}
}

func (x *RecreateCoinData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecreateCoinData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *RecreateCoinData) GetInitialAmount() string {
	if x != nil {
		return x.InitialAmount
	}
	return ""
}

func (x *RecreateCoinData) GetInitialReserve() string {
	if x != nil {
		return x.InitialReserve
	}
	return ""
}

func (x *RecreateCoinData) GetConstantReserveRatio() uint64 {
	if x != nil {
		return x.ConstantReserveRatio
	}
	return 0
}

func (x *RecreateCoinData) GetMaxSupply() string {
	if x != nil {
		return x.MaxSupply
	}
	return ""
}

type EditCoinOwnerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol   string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	NewOwner string `protobuf:"bytes,2,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
}

func (x *EditCoinOwnerData) Reset() {
	*x = EditCoinOwnerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditCoinOwnerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCoinOwnerData) ProtoMessage() {}

func (x *EditCoinOwnerData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCoinOwnerData.ProtoReflect.Descriptor instead.
func (*EditCoinOwnerData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{16}
}

func (x *EditCoinOwnerData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *EditCoinOwnerData) GetNewOwner() string {
	if x != nil {
		return x.NewOwner
	}
	return ""
}

type EditMultisigData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold uint64   `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Weights   []uint64 `protobuf:"varint,2,rep,packed,name=weights,proto3" json:"weights,omitempty"`
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *EditMultisigData) Reset() {
	*x = EditMultisigData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditMultisigData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditMultisigData) ProtoMessage() {}

func (x *EditMultisigData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditMultisigData.ProtoReflect.Descriptor instead.
func (*EditMultisigData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{17}
}

func (x *EditMultisigData) GetThreshold() uint64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *EditMultisigData) GetWeights() []uint64 {
	if x != nil {
		return x.Weights
	}
	return nil
}

func (x *EditMultisigData) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type EditCandidatePublicKeyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey    string `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	NewPubKey string `protobuf:"bytes,2,opt,name=new_pub_key,json=newPubKey,proto3" json:"new_pub_key,omitempty"`
}

func (x *EditCandidatePublicKeyData) Reset() {
	*x = EditCandidatePublicKeyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditCandidatePublicKeyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCandidatePublicKeyData) ProtoMessage() {}

func (x *EditCandidatePublicKeyData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCandidatePublicKeyData.ProtoReflect.Descriptor instead.
func (*EditCandidatePublicKeyData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{18}
}

func (x *EditCandidatePublicKeyData) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *EditCandidatePublicKeyData) GetNewPubKey() string {
	if x != nil {
		return x.NewPubKey
	}
	return ""
}

type CreateSwapPoolData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin0   *Coin  `protobuf:"bytes,1,opt,name=coin0,proto3" json:"coin0,omitempty"`
	Coin1   *Coin  `protobuf:"bytes,2,opt,name=coin1,proto3" json:"coin1,omitempty"`
	Volume0 string `protobuf:"bytes,3,opt,name=volume0,proto3" json:"volume0,omitempty"`
	Volume1 string `protobuf:"bytes,4,opt,name=volume1,proto3" json:"volume1,omitempty"`
}

func (x *CreateSwapPoolData) Reset() {
	*x = CreateSwapPoolData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSwapPoolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSwapPoolData) ProtoMessage() {}

func (x *CreateSwapPoolData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSwapPoolData.ProtoReflect.Descriptor instead.
func (*CreateSwapPoolData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{19}
}

func (x *CreateSwapPoolData) GetCoin0() *Coin {
	if x != nil {
		return x.Coin0
	}
	return nil
}

func (x *CreateSwapPoolData) GetCoin1() *Coin {
	if x != nil {
		return x.Coin1
	}
	return nil
}

func (x *CreateSwapPoolData) GetVolume0() string {
	if x != nil {
		return x.Volume0
	}
	return ""
}

func (x *CreateSwapPoolData) GetVolume1() string {
	if x != nil {
		return x.Volume1
	}
	return ""
}

type AddLiquidityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin0          *Coin  `protobuf:"bytes,1,opt,name=coin0,proto3" json:"coin0,omitempty"`
	Coin1          *Coin  `protobuf:"bytes,2,opt,name=coin1,proto3" json:"coin1,omitempty"`
	Volume0        string `protobuf:"bytes,3,opt,name=volume0,proto3" json:"volume0,omitempty"`
	MaximumVolume1 string `protobuf:"bytes,4,opt,name=maximum_volume1,json=maximumVolume1,proto3" json:"maximum_volume1,omitempty"`
}

func (x *AddLiquidityData) Reset() {
	*x = AddLiquidityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLiquidityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLiquidityData) ProtoMessage() {}

func (x *AddLiquidityData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLiquidityData.ProtoReflect.Descriptor instead.
func (*AddLiquidityData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{20}
}

func (x *AddLiquidityData) GetCoin0() *Coin {
	if x != nil {
		return x.Coin0
	}
	return nil
}

func (x *AddLiquidityData) GetCoin1() *Coin {
	if x != nil {
		return x.Coin1
	}
	return nil
}

func (x *AddLiquidityData) GetVolume0() string {
	if x != nil {
		return x.Volume0
	}
	return ""
}

func (x *AddLiquidityData) GetMaximumVolume1() string {
	if x != nil {
		return x.MaximumVolume1
	}
	return ""
}

type RemoveLiquidityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin0          *Coin  `protobuf:"bytes,1,opt,name=coin0,proto3" json:"coin0,omitempty"`
	Coin1          *Coin  `protobuf:"bytes,2,opt,name=coin1,proto3" json:"coin1,omitempty"`
	Liquidity      string `protobuf:"bytes,3,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	MinimumVolume0 string `protobuf:"bytes,4,opt,name=minimum_volume0,json=minimumVolume0,proto3" json:"minimum_volume0,omitempty"`
	MinimumVolume1 string `protobuf:"bytes,5,opt,name=minimum_volume1,json=minimumVolume1,proto3" json:"minimum_volume1,omitempty"`
}

func (x *RemoveLiquidityData) Reset() {
	*x = RemoveLiquidityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLiquidityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLiquidityData) ProtoMessage() {}

func (x *RemoveLiquidityData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLiquidityData.ProtoReflect.Descriptor instead.
func (*RemoveLiquidityData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{21}
}

func (x *RemoveLiquidityData) GetCoin0() *Coin {
	if x != nil {
		return x.Coin0
	}
	return nil
}

func (x *RemoveLiquidityData) GetCoin1() *Coin {
	if x != nil {
		return x.Coin1
	}
	return nil
}

func (x *RemoveLiquidityData) GetLiquidity() string {
	if x != nil {
		return x.Liquidity
	}
	return ""
}

func (x *RemoveLiquidityData) GetMinimumVolume0() string {
	if x != nil {
		return x.MinimumVolume0
	}
	return ""
}

func (x *RemoveLiquidityData) GetMinimumVolume1() string {
	if x != nil {
		return x.MinimumVolume1
	}
	return ""
}

type SellSwapPoolData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins             []*Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
	ValueToSell       string  `protobuf:"bytes,2,opt,name=value_to_sell,json=valueToSell,proto3" json:"value_to_sell,omitempty"`
	MinimumValueToBuy string  `protobuf:"bytes,4,opt,name=minimum_value_to_buy,json=minimumValueToBuy,proto3" json:"minimum_value_to_buy,omitempty"`
}

func (x *SellSwapPoolData) Reset() {
	*x = SellSwapPoolData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellSwapPoolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellSwapPoolData) ProtoMessage() {}

func (x *SellSwapPoolData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellSwapPoolData.ProtoReflect.Descriptor instead.
func (*SellSwapPoolData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{22}
}

func (x *SellSwapPoolData) GetCoins() []*Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

func (x *SellSwapPoolData) GetValueToSell() string {
	if x != nil {
		return x.ValueToSell
	}
	return ""
}

func (x *SellSwapPoolData) GetMinimumValueToBuy() string {
	if x != nil {
		return x.MinimumValueToBuy
	}
	return ""
}

type SellAllSwapPoolData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins             []*Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
	MinimumValueToBuy string  `protobuf:"bytes,3,opt,name=minimum_value_to_buy,json=minimumValueToBuy,proto3" json:"minimum_value_to_buy,omitempty"`
}

func (x *SellAllSwapPoolData) Reset() {
	*x = SellAllSwapPoolData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellAllSwapPoolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellAllSwapPoolData) ProtoMessage() {}

func (x *SellAllSwapPoolData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellAllSwapPoolData.ProtoReflect.Descriptor instead.
func (*SellAllSwapPoolData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{23}
}

func (x *SellAllSwapPoolData) GetCoins() []*Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

func (x *SellAllSwapPoolData) GetMinimumValueToBuy() string {
	if x != nil {
		return x.MinimumValueToBuy
	}
	return ""
}

type BuySwapPoolData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins              []*Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
	ValueToBuy         string  `protobuf:"bytes,2,opt,name=value_to_buy,json=valueToBuy,proto3" json:"value_to_buy,omitempty"`
	MaximumValueToSell string  `protobuf:"bytes,4,opt,name=maximum_value_to_sell,json=maximumValueToSell,proto3" json:"maximum_value_to_sell,omitempty"`
}

func (x *BuySwapPoolData) Reset() {
	*x = BuySwapPoolData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuySwapPoolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuySwapPoolData) ProtoMessage() {}

func (x *BuySwapPoolData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuySwapPoolData.ProtoReflect.Descriptor instead.
func (*BuySwapPoolData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{24}
}

func (x *BuySwapPoolData) GetCoins() []*Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

func (x *BuySwapPoolData) GetValueToBuy() string {
	if x != nil {
		return x.ValueToBuy
	}
	return ""
}

func (x *BuySwapPoolData) GetMaximumValueToSell() string {
	if x != nil {
		return x.MaximumValueToSell
	}
	return ""
}

type EditCandidateCommission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey     string `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Commission uint64 `protobuf:"varint,2,opt,name=commission,proto3" json:"commission,omitempty"`
}

func (x *EditCandidateCommission) Reset() {
	*x = EditCandidateCommission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditCandidateCommission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCandidateCommission) ProtoMessage() {}

func (x *EditCandidateCommission) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCandidateCommission.ProtoReflect.Descriptor instead.
func (*EditCandidateCommission) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{25}
}

func (x *EditCandidateCommission) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *EditCandidateCommission) GetCommission() uint64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

type MintTokenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin  *Coin  `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MintTokenData) Reset() {
	*x = MintTokenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintTokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintTokenData) ProtoMessage() {}

func (x *MintTokenData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintTokenData.ProtoReflect.Descriptor instead.
func (*MintTokenData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{26}
}

func (x *MintTokenData) GetCoin() *Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *MintTokenData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BurnTokenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin  *Coin  `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BurnTokenData) Reset() {
	*x = BurnTokenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurnTokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnTokenData) ProtoMessage() {}

func (x *BurnTokenData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnTokenData.ProtoReflect.Descriptor instead.
func (*BurnTokenData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{27}
}

func (x *BurnTokenData) GetCoin() *Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *BurnTokenData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CreateTokenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol        string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	InitialAmount string `protobuf:"bytes,3,opt,name=initial_amount,json=initialAmount,proto3" json:"initial_amount,omitempty"`
	MaxSupply     string `protobuf:"bytes,4,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
	Mintable      bool   `protobuf:"varint,5,opt,name=mintable,proto3" json:"mintable,omitempty"`
	Burnable      bool   `protobuf:"varint,6,opt,name=burnable,proto3" json:"burnable,omitempty"`
}

func (x *CreateTokenData) Reset() {
	*x = CreateTokenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenData) ProtoMessage() {}

func (x *CreateTokenData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenData.ProtoReflect.Descriptor instead.
func (*CreateTokenData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{28}
}

func (x *CreateTokenData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTokenData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CreateTokenData) GetInitialAmount() string {
	if x != nil {
		return x.InitialAmount
	}
	return ""
}

func (x *CreateTokenData) GetMaxSupply() string {
	if x != nil {
		return x.MaxSupply
	}
	return ""
}

func (x *CreateTokenData) GetMintable() bool {
	if x != nil {
		return x.Mintable
	}
	return false
}

func (x *CreateTokenData) GetBurnable() bool {
	if x != nil {
		return x.Burnable
	}
	return false
}

type RecreateTokenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol        string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	InitialAmount string `protobuf:"bytes,3,opt,name=initial_amount,json=initialAmount,proto3" json:"initial_amount,omitempty"`
	MaxSupply     string `protobuf:"bytes,4,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
	Mintable      bool   `protobuf:"varint,5,opt,name=mintable,proto3" json:"mintable,omitempty"`
	Burnable      bool   `protobuf:"varint,6,opt,name=burnable,proto3" json:"burnable,omitempty"`
}

func (x *RecreateTokenData) Reset() {
	*x = RecreateTokenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecreateTokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecreateTokenData) ProtoMessage() {}

func (x *RecreateTokenData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecreateTokenData.ProtoReflect.Descriptor instead.
func (*RecreateTokenData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{29}
}

func (x *RecreateTokenData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecreateTokenData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *RecreateTokenData) GetInitialAmount() string {
	if x != nil {
		return x.InitialAmount
	}
	return ""
}

func (x *RecreateTokenData) GetMaxSupply() string {
	if x != nil {
		return x.MaxSupply
	}
	return ""
}

func (x *RecreateTokenData) GetMintable() bool {
	if x != nil {
		return x.Mintable
	}
	return false
}

func (x *RecreateTokenData) GetBurnable() bool {
	if x != nil {
		return x.Burnable
	}
	return false
}

type VoteCommissionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey                  string `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Height                  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Coin                    *Coin  `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin,omitempty"`
	PayloadByte             string `protobuf:"bytes,4,opt,name=payload_byte,json=payloadByte,proto3" json:"payload_byte,omitempty"`
	Send                    string `protobuf:"bytes,5,opt,name=send,proto3" json:"send,omitempty"`
	BuyBancor               string `protobuf:"bytes,38,opt,name=buy_bancor,json=buyBancor,proto3" json:"buy_bancor,omitempty"`
	SellBancor              string `protobuf:"bytes,39,opt,name=sell_bancor,json=sellBancor,proto3" json:"sell_bancor,omitempty"`
	SellAllBancor           string `protobuf:"bytes,40,opt,name=sell_all_bancor,json=sellAllBancor,proto3" json:"sell_all_bancor,omitempty"`
	BuyPoolBase             string `protobuf:"bytes,41,opt,name=buy_pool_base,json=buyPoolBase,proto3" json:"buy_pool_base,omitempty"`
	BuyPoolDelta            string `protobuf:"bytes,53,opt,name=buy_pool_delta,json=buyPoolDelta,proto3" json:"buy_pool_delta,omitempty"`
	SellPoolBase            string `protobuf:"bytes,42,opt,name=sell_pool_base,json=sellPoolBase,proto3" json:"sell_pool_base,omitempty"`
	SellPoolDelta           string `protobuf:"bytes,54,opt,name=sell_pool_delta,json=sellPoolDelta,proto3" json:"sell_pool_delta,omitempty"`
	SellAllPoolBase         string `protobuf:"bytes,43,opt,name=sell_all_pool_base,json=sellAllPoolBase,proto3" json:"sell_all_pool_base,omitempty"`
	SellAllPoolDelta        string `protobuf:"bytes,55,opt,name=sell_all_pool_delta,json=sellAllPoolDelta,proto3" json:"sell_all_pool_delta,omitempty"`
	CreateTicker3           string `protobuf:"bytes,7,opt,name=create_ticker3,json=createTicker3,proto3" json:"create_ticker3,omitempty"`
	CreateTicker4           string `protobuf:"bytes,8,opt,name=create_ticker4,json=createTicker4,proto3" json:"create_ticker4,omitempty"`
	CreateTicker5           string `protobuf:"bytes,9,opt,name=create_ticker5,json=createTicker5,proto3" json:"create_ticker5,omitempty"`
	CreateTicker6           string `protobuf:"bytes,10,opt,name=create_ticker6,json=createTicker6,proto3" json:"create_ticker6,omitempty"`
	CreateTicker7_10        string `protobuf:"bytes,11,opt,name=create_ticker7_10,json=createTicker710,proto3" json:"create_ticker7_10,omitempty"`
	CreateCoin              string `protobuf:"bytes,34,opt,name=create_coin,json=createCoin,proto3" json:"create_coin,omitempty"`
	CreateToken             string `protobuf:"bytes,35,opt,name=create_token,json=createToken,proto3" json:"create_token,omitempty"`
	RecreateCoin            string `protobuf:"bytes,36,opt,name=recreate_coin,json=recreateCoin,proto3" json:"recreate_coin,omitempty"`
	RecreateToken           string `protobuf:"bytes,37,opt,name=recreate_token,json=recreateToken,proto3" json:"recreate_token,omitempty"`
	DeclareCandidacy        string `protobuf:"bytes,13,opt,name=declare_candidacy,json=declareCandidacy,proto3" json:"declare_candidacy,omitempty"`
	Delegate                string `protobuf:"bytes,14,opt,name=delegate,proto3" json:"delegate,omitempty"`
	Unbond                  string `protobuf:"bytes,15,opt,name=unbond,proto3" json:"unbond,omitempty"`
	RedeemCheck             string `protobuf:"bytes,16,opt,name=redeem_check,json=redeemCheck,proto3" json:"redeem_check,omitempty"`
	SetCandidateOn          string `protobuf:"bytes,44,opt,name=set_candidate_on,json=setCandidateOn,proto3" json:"set_candidate_on,omitempty"`
	SetCandidateOff         string `protobuf:"bytes,45,opt,name=set_candidate_off,json=setCandidateOff,proto3" json:"set_candidate_off,omitempty"`
	CreateMultisig          string `protobuf:"bytes,18,opt,name=create_multisig,json=createMultisig,proto3" json:"create_multisig,omitempty"`
	MultisendBase           string `protobuf:"bytes,51,opt,name=multisend_base,json=multisendBase,proto3" json:"multisend_base,omitempty"`
	MultisendDelta          string `protobuf:"bytes,52,opt,name=multisend_delta,json=multisendDelta,proto3" json:"multisend_delta,omitempty"`
	EditCandidate           string `protobuf:"bytes,20,opt,name=edit_candidate,json=editCandidate,proto3" json:"edit_candidate,omitempty"`
	SetHaltBlock            string `protobuf:"bytes,21,opt,name=set_halt_block,json=setHaltBlock,proto3" json:"set_halt_block,omitempty"`
	EditTickerOwner         string `protobuf:"bytes,22,opt,name=edit_ticker_owner,json=editTickerOwner,proto3" json:"edit_ticker_owner,omitempty"`
	EditMultisig            string `protobuf:"bytes,23,opt,name=edit_multisig,json=editMultisig,proto3" json:"edit_multisig,omitempty"`
	EditCandidatePublicKey  string `protobuf:"bytes,25,opt,name=edit_candidate_public_key,json=editCandidatePublicKey,proto3" json:"edit_candidate_public_key,omitempty"`
	CreateSwapPool          string `protobuf:"bytes,48,opt,name=create_swap_pool,json=createSwapPool,proto3" json:"create_swap_pool,omitempty"`
	AddLiquidity            string `protobuf:"bytes,49,opt,name=add_liquidity,json=addLiquidity,proto3" json:"add_liquidity,omitempty"`
	RemoveLiquidity         string `protobuf:"bytes,50,opt,name=remove_liquidity,json=removeLiquidity,proto3" json:"remove_liquidity,omitempty"`
	EditCandidateCommission string `protobuf:"bytes,28,opt,name=edit_candidate_commission,json=editCandidateCommission,proto3" json:"edit_candidate_commission,omitempty"`
	MintToken               string `protobuf:"bytes,46,opt,name=mint_token,json=mintToken,proto3" json:"mint_token,omitempty"`
	BurnToken               string `protobuf:"bytes,47,opt,name=burn_token,json=burnToken,proto3" json:"burn_token,omitempty"`
	VoteCommission          string `protobuf:"bytes,31,opt,name=vote_commission,json=voteCommission,proto3" json:"vote_commission,omitempty"`
	VoteUpdate              string `protobuf:"bytes,32,opt,name=vote_update,json=voteUpdate,proto3" json:"vote_update,omitempty"`
	FailedTx                string `protobuf:"bytes,56,opt,name=failed_tx,json=failedTx,proto3" json:"failed_tx,omitempty"`
	AddLimitOrder           string `protobuf:"bytes,57,opt,name=add_limit_order,json=addLimitOrder,proto3" json:"add_limit_order,omitempty"`
	RemoveLimitOrder        string `protobuf:"bytes,58,opt,name=remove_limit_order,json=removeLimitOrder,proto3" json:"remove_limit_order,omitempty"`
}

func (x *VoteCommissionData) Reset() {
	*x = VoteCommissionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteCommissionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteCommissionData) ProtoMessage() {}

func (x *VoteCommissionData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteCommissionData.ProtoReflect.Descriptor instead.
func (*VoteCommissionData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{30}
}

func (x *VoteCommissionData) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *VoteCommissionData) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VoteCommissionData) GetCoin() *Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *VoteCommissionData) GetPayloadByte() string {
	if x != nil {
		return x.PayloadByte
	}
	return ""
}

func (x *VoteCommissionData) GetSend() string {
	if x != nil {
		return x.Send
	}
	return ""
}

func (x *VoteCommissionData) GetBuyBancor() string {
	if x != nil {
		return x.BuyBancor
	}
	return ""
}

func (x *VoteCommissionData) GetSellBancor() string {
	if x != nil {
		return x.SellBancor
	}
	return ""
}

func (x *VoteCommissionData) GetSellAllBancor() string {
	if x != nil {
		return x.SellAllBancor
	}
	return ""
}

func (x *VoteCommissionData) GetBuyPoolBase() string {
	if x != nil {
		return x.BuyPoolBase
	}
	return ""
}

func (x *VoteCommissionData) GetBuyPoolDelta() string {
	if x != nil {
		return x.BuyPoolDelta
	}
	return ""
}

func (x *VoteCommissionData) GetSellPoolBase() string {
	if x != nil {
		return x.SellPoolBase
	}
	return ""
}

func (x *VoteCommissionData) GetSellPoolDelta() string {
	if x != nil {
		return x.SellPoolDelta
	}
	return ""
}

func (x *VoteCommissionData) GetSellAllPoolBase() string {
	if x != nil {
		return x.SellAllPoolBase
	}
	return ""
}

func (x *VoteCommissionData) GetSellAllPoolDelta() string {
	if x != nil {
		return x.SellAllPoolDelta
	}
	return ""
}

func (x *VoteCommissionData) GetCreateTicker3() string {
	if x != nil {
		return x.CreateTicker3
	}
	return ""
}

func (x *VoteCommissionData) GetCreateTicker4() string {
	if x != nil {
		return x.CreateTicker4
	}
	return ""
}

func (x *VoteCommissionData) GetCreateTicker5() string {
	if x != nil {
		return x.CreateTicker5
	}
	return ""
}

func (x *VoteCommissionData) GetCreateTicker6() string {
	if x != nil {
		return x.CreateTicker6
	}
	return ""
}

func (x *VoteCommissionData) GetCreateTicker7_10() string {
	if x != nil {
		return x.CreateTicker7_10
	}
	return ""
}

func (x *VoteCommissionData) GetCreateCoin() string {
	if x != nil {
		return x.CreateCoin
	}
	return ""
}

func (x *VoteCommissionData) GetCreateToken() string {
	if x != nil {
		return x.CreateToken
	}
	return ""
}

func (x *VoteCommissionData) GetRecreateCoin() string {
	if x != nil {
		return x.RecreateCoin
	}
	return ""
}

func (x *VoteCommissionData) GetRecreateToken() string {
	if x != nil {
		return x.RecreateToken
	}
	return ""
}

func (x *VoteCommissionData) GetDeclareCandidacy() string {
	if x != nil {
		return x.DeclareCandidacy
	}
	return ""
}

func (x *VoteCommissionData) GetDelegate() string {
	if x != nil {
		return x.Delegate
	}
	return ""
}

func (x *VoteCommissionData) GetUnbond() string {
	if x != nil {
		return x.Unbond
	}
	return ""
}

func (x *VoteCommissionData) GetRedeemCheck() string {
	if x != nil {
		return x.RedeemCheck
	}
	return ""
}

func (x *VoteCommissionData) GetSetCandidateOn() string {
	if x != nil {
		return x.SetCandidateOn
	}
	return ""
}

func (x *VoteCommissionData) GetSetCandidateOff() string {
	if x != nil {
		return x.SetCandidateOff
	}
	return ""
}

func (x *VoteCommissionData) GetCreateMultisig() string {
	if x != nil {
		return x.CreateMultisig
	}
	return ""
}

func (x *VoteCommissionData) GetMultisendBase() string {
	if x != nil {
		return x.MultisendBase
	}
	return ""
}

func (x *VoteCommissionData) GetMultisendDelta() string {
	if x != nil {
		return x.MultisendDelta
	}
	return ""
}

func (x *VoteCommissionData) GetEditCandidate() string {
	if x != nil {
		return x.EditCandidate
	}
	return ""
}

func (x *VoteCommissionData) GetSetHaltBlock() string {
	if x != nil {
		return x.SetHaltBlock
	}
	return ""
}

func (x *VoteCommissionData) GetEditTickerOwner() string {
	if x != nil {
		return x.EditTickerOwner
	}
	return ""
}

func (x *VoteCommissionData) GetEditMultisig() string {
	if x != nil {
		return x.EditMultisig
	}
	return ""
}

func (x *VoteCommissionData) GetEditCandidatePublicKey() string {
	if x != nil {
		return x.EditCandidatePublicKey
	}
	return ""
}

func (x *VoteCommissionData) GetCreateSwapPool() string {
	if x != nil {
		return x.CreateSwapPool
	}
	return ""
}

func (x *VoteCommissionData) GetAddLiquidity() string {
	if x != nil {
		return x.AddLiquidity
	}
	return ""
}

func (x *VoteCommissionData) GetRemoveLiquidity() string {
	if x != nil {
		return x.RemoveLiquidity
	}
	return ""
}

func (x *VoteCommissionData) GetEditCandidateCommission() string {
	if x != nil {
		return x.EditCandidateCommission
	}
	return ""
}

func (x *VoteCommissionData) GetMintToken() string {
	if x != nil {
		return x.MintToken
	}
	return ""
}

func (x *VoteCommissionData) GetBurnToken() string {
	if x != nil {
		return x.BurnToken
	}
	return ""
}

func (x *VoteCommissionData) GetVoteCommission() string {
	if x != nil {
		return x.VoteCommission
	}
	return ""
}

func (x *VoteCommissionData) GetVoteUpdate() string {
	if x != nil {
		return x.VoteUpdate
	}
	return ""
}

func (x *VoteCommissionData) GetFailedTx() string {
	if x != nil {
		return x.FailedTx
	}
	return ""
}

func (x *VoteCommissionData) GetAddLimitOrder() string {
	if x != nil {
		return x.AddLimitOrder
	}
	return ""
}

func (x *VoteCommissionData) GetRemoveLimitOrder() string {
	if x != nil {
		return x.RemoveLimitOrder
	}
	return ""
}

type VoteUpdateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey  string `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VoteUpdateData) Reset() {
	*x = VoteUpdateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteUpdateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteUpdateData) ProtoMessage() {}

func (x *VoteUpdateData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteUpdateData.ProtoReflect.Descriptor instead.
func (*VoteUpdateData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{31}
}

func (x *VoteUpdateData) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *VoteUpdateData) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VoteUpdateData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type AddLimitOrderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinToSell  *Coin  `protobuf:"bytes,1,opt,name=coin_to_sell,json=coinToSell,proto3" json:"coin_to_sell,omitempty"`
	ValueToSell string `protobuf:"bytes,2,opt,name=value_to_sell,json=valueToSell,proto3" json:"value_to_sell,omitempty"`
	CoinToBuy   *Coin  `protobuf:"bytes,3,opt,name=coin_to_buy,json=coinToBuy,proto3" json:"coin_to_buy,omitempty"`
	ValueToBuy  string `protobuf:"bytes,4,opt,name=value_to_buy,json=valueToBuy,proto3" json:"value_to_buy,omitempty"`
}

func (x *AddLimitOrderData) Reset() {
	*x = AddLimitOrderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLimitOrderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLimitOrderData) ProtoMessage() {}

func (x *AddLimitOrderData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLimitOrderData.ProtoReflect.Descriptor instead.
func (*AddLimitOrderData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{32}
}

func (x *AddLimitOrderData) GetCoinToSell() *Coin {
	if x != nil {
		return x.CoinToSell
	}
	return nil
}

func (x *AddLimitOrderData) GetValueToSell() string {
	if x != nil {
		return x.ValueToSell
	}
	return ""
}

func (x *AddLimitOrderData) GetCoinToBuy() *Coin {
	if x != nil {
		return x.CoinToBuy
	}
	return nil
}

func (x *AddLimitOrderData) GetValueToBuy() string {
	if x != nil {
		return x.ValueToBuy
	}
	return ""
}

type RemoveLimitOrderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveLimitOrderData) Reset() {
	*x = RemoveLimitOrderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLimitOrderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLimitOrderData) ProtoMessage() {}

func (x *RemoveLimitOrderData) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLimitOrderData.ProtoReflect.Descriptor instead.
func (*RemoveLimitOrderData) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{33}
}

func (x *RemoveLimitOrderData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_data_proto protoreflect.FileDescriptor

var file_data_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x70,
	0x69, 0x5f, 0x70, 0x62, 0x1a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x0c, 0x53, 0x65,
	0x6c, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0c, 0x63, 0x6f,
	0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0a,
	0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x2c,
	0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x42, 0x75, 0x79, 0x12, 0x2f, 0x0a, 0x14,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x62, 0x75, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x42, 0x75, 0x79, 0x22, 0xa0, 0x01,
	0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2e, 0x0a, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x53, 0x65, 0x6c,
	0x6c, 0x12, 0x2c, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x42, 0x75, 0x79, 0x12,
	0x2f, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x42, 0x75, 0x79,
	0x22, 0xc0, 0x01, 0x0a, 0x0b, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2c, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x42, 0x75, 0x79, 0x12, 0x20,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x42, 0x75, 0x79,
	0x12, 0x2e, 0x0a, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x6c,
	0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x53,
	0x65, 0x6c, 0x6c, 0x22, 0xe1, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75,
	0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x22, 0x5f, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x0a,
	0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75,
	0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x0f, 0x52,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x61, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x22, 0x2d, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x22, 0x2e, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x22, 0x6a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x0d,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x45, 0x64, 0x69, 0x74, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x43, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x48, 0x61,
	0x6c, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe3, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x22, 0x48, 0x0a, 0x11, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x10,
	0x45, 0x64, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x1a, 0x45, 0x64, 0x69, 0x74, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a,
	0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x90, 0x01,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x6f, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x30, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x31, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31,
	0x22, 0x9d, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x30, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6f, 0x69,
	0x6e, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x31, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31,
	0x22, 0xcd, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e,
	0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x30, 0x12, 0x22, 0x0a, 0x05,
	0x63, 0x6f, 0x69, 0x6e, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x31,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31,
	0x22, 0x8b, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x6f,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x2f, 0x0a,
	0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x42, 0x75, 0x79, 0x22, 0x6a,
	0x0a, 0x13, 0x53, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x6f,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x42, 0x75, 0x79, 0x22, 0x8a, 0x01, 0x0a, 0x0f, 0x42,
	0x75, 0x79, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22,
	0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69,
	0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x6f, 0x42, 0x75, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x22, 0x52, 0x0a, 0x17, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x0d, 0x4d,
	0x69, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69,
	0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x0d, 0x42, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbb, 0x01,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x62, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x11,
	0x52, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x62, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xaf, 0x0e, 0x0a, 0x12,
	0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x75, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x63, 0x6f, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x75, 0x79, 0x42, 0x61, 0x6e, 0x63, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x63, 0x6f, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x42, 0x61, 0x6e, 0x63, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x63, 0x6f, 0x72, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x42, 0x61,
	0x6e, 0x63, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x79,
	0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x75, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x6f, 0x6c,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x12,
	0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x6c,
	0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x50,
	0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x33, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x34, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x35, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x36, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x36, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x37, 0x5f, 0x31, 0x30, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x37, 0x31, 0x30,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x63, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x62,
	0x6f, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x62, 0x6f, 0x6e,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x64, 0x69,
	0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65,
	0x74, 0x5f, 0x68, 0x61, 0x6c, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x48, 0x61, 0x6c, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x2a, 0x0a, 0x11, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x64, 0x69,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77,
	0x61, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x64, 0x69, 0x74, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x64, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x5b, 0x0a,
	0x0e, 0x56, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x41,
	0x64, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x6c,
	0x12, 0x22, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f,
	0x53, 0x65, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x75, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x42,
	0x75, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x75, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x6f, 0x42, 0x75, 0x79, 0x22, 0x26, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x42, 0x37, 0x5a, 0x35,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x61, 0x6d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x3b, 0x61,
	0x70, 0x69, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_proto_rawDescOnce sync.Once
	file_data_proto_rawDescData = file_data_proto_rawDesc
)

func file_data_proto_rawDescGZIP() []byte {
	file_data_proto_rawDescOnce.Do(func() {
		file_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_proto_rawDescData)
	})
	return file_data_proto_rawDescData
}

var file_data_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_data_proto_goTypes = []interface{}{
	(*SendData)(nil),                   // 0: api_pb.SendData
	(*SellCoinData)(nil),               // 1: api_pb.SellCoinData
	(*SellAllCoinData)(nil),            // 2: api_pb.SellAllCoinData
	(*BuyCoinData)(nil),                // 3: api_pb.BuyCoinData
	(*CreateCoinData)(nil),             // 4: api_pb.CreateCoinData
	(*DeclareCandidacyData)(nil),       // 5: api_pb.DeclareCandidacyData
	(*DelegateData)(nil),               // 6: api_pb.DelegateData
	(*UnbondData)(nil),                 // 7: api_pb.UnbondData
	(*RedeemCheckData)(nil),            // 8: api_pb.RedeemCheckData
	(*SetCandidateOnData)(nil),         // 9: api_pb.SetCandidateOnData
	(*SetCandidateOffData)(nil),        // 10: api_pb.SetCandidateOffData
	(*CreateMultisigData)(nil),         // 11: api_pb.CreateMultisigData
	(*MultiSendData)(nil),              // 12: api_pb.MultiSendData
	(*EditCandidateData)(nil),          // 13: api_pb.EditCandidateData
	(*SetHaltBlockData)(nil),           // 14: api_pb.SetHaltBlockData
	(*RecreateCoinData)(nil),           // 15: api_pb.RecreateCoinData
	(*EditCoinOwnerData)(nil),          // 16: api_pb.EditCoinOwnerData
	(*EditMultisigData)(nil),           // 17: api_pb.EditMultisigData
	(*EditCandidatePublicKeyData)(nil), // 18: api_pb.EditCandidatePublicKeyData
	(*CreateSwapPoolData)(nil),         // 19: api_pb.CreateSwapPoolData
	(*AddLiquidityData)(nil),           // 20: api_pb.AddLiquidityData
	(*RemoveLiquidityData)(nil),        // 21: api_pb.RemoveLiquidityData
	(*SellSwapPoolData)(nil),           // 22: api_pb.SellSwapPoolData
	(*SellAllSwapPoolData)(nil),        // 23: api_pb.SellAllSwapPoolData
	(*BuySwapPoolData)(nil),            // 24: api_pb.BuySwapPoolData
	(*EditCandidateCommission)(nil),    // 25: api_pb.EditCandidateCommission
	(*MintTokenData)(nil),              // 26: api_pb.MintTokenData
	(*BurnTokenData)(nil),              // 27: api_pb.BurnTokenData
	(*CreateTokenData)(nil),            // 28: api_pb.CreateTokenData
	(*RecreateTokenData)(nil),          // 29: api_pb.RecreateTokenData
	(*VoteCommissionData)(nil),         // 30: api_pb.VoteCommissionData
	(*VoteUpdateData)(nil),             // 31: api_pb.VoteUpdateData
	(*AddLimitOrderData)(nil),          // 32: api_pb.AddLimitOrderData
	(*RemoveLimitOrderData)(nil),       // 33: api_pb.RemoveLimitOrderData
	(*Coin)(nil),                       // 34: api_pb.Coin
}
var file_data_proto_depIdxs = []int32{
	34, // 0: api_pb.SendData.coin:type_name -> api_pb.Coin
	34, // 1: api_pb.SellCoinData.coin_to_sell:type_name -> api_pb.Coin
	34, // 2: api_pb.SellCoinData.coin_to_buy:type_name -> api_pb.Coin
	34, // 3: api_pb.SellAllCoinData.coin_to_sell:type_name -> api_pb.Coin
	34, // 4: api_pb.SellAllCoinData.coin_to_buy:type_name -> api_pb.Coin
	34, // 5: api_pb.BuyCoinData.coin_to_buy:type_name -> api_pb.Coin
	34, // 6: api_pb.BuyCoinData.coin_to_sell:type_name -> api_pb.Coin
	34, // 7: api_pb.DeclareCandidacyData.coin:type_name -> api_pb.Coin
	34, // 8: api_pb.DelegateData.coin:type_name -> api_pb.Coin
	34, // 9: api_pb.UnbondData.coin:type_name -> api_pb.Coin
	0,  // 10: api_pb.MultiSendData.list:type_name -> api_pb.SendData
	34, // 11: api_pb.CreateSwapPoolData.coin0:type_name -> api_pb.Coin
	34, // 12: api_pb.CreateSwapPoolData.coin1:type_name -> api_pb.Coin
	34, // 13: api_pb.AddLiquidityData.coin0:type_name -> api_pb.Coin
	34, // 14: api_pb.AddLiquidityData.coin1:type_name -> api_pb.Coin
	34, // 15: api_pb.RemoveLiquidityData.coin0:type_name -> api_pb.Coin
	34, // 16: api_pb.RemoveLiquidityData.coin1:type_name -> api_pb.Coin
	34, // 17: api_pb.SellSwapPoolData.coins:type_name -> api_pb.Coin
	34, // 18: api_pb.SellAllSwapPoolData.coins:type_name -> api_pb.Coin
	34, // 19: api_pb.BuySwapPoolData.coins:type_name -> api_pb.Coin
	34, // 20: api_pb.MintTokenData.coin:type_name -> api_pb.Coin
	34, // 21: api_pb.BurnTokenData.coin:type_name -> api_pb.Coin
	34, // 22: api_pb.VoteCommissionData.coin:type_name -> api_pb.Coin
	34, // 23: api_pb.AddLimitOrderData.coin_to_sell:type_name -> api_pb.Coin
	34, // 24: api_pb.AddLimitOrderData.coin_to_buy:type_name -> api_pb.Coin
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_data_proto_init() }
func file_data_proto_init() {
	if File_data_proto != nil {
		return
	}
	file_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellCoinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellAllCoinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyCoinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclareCandidacyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbondData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedeemCheckData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCandidateOnData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCandidateOffData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultisigData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiSendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditCandidateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHaltBlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecreateCoinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditCoinOwnerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditMultisigData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditCandidatePublicKeyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSwapPoolData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLiquidityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLiquidityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellSwapPoolData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellAllSwapPoolData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuySwapPoolData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditCandidateCommission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintTokenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurnTokenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecreateTokenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteCommissionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteUpdateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLimitOrderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLimitOrderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_data_proto_goTypes,
		DependencyIndexes: file_data_proto_depIdxs,
		MessageInfos:      file_data_proto_msgTypes,
	}.Build()
	File_data_proto = out.File
	file_data_proto_rawDesc = nil
	file_data_proto_goTypes = nil
	file_data_proto_depIdxs = nil
}
