// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	// Subscribe
	//
	// Subscribe returns a subscription for events by query. Only supported in WS and gRPC methods.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeClient, error)
	// Halts
	//
	// Halts returns the candidate votes for stopping the network at block.
	Halts(ctx context.Context, in *HaltsRequest, opts ...grpc.CallOption) (*HaltsResponse, error)
	// Genesis
	//
	// Genesis returns genesis file.
	Genesis(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenesisResponse, error)
	// MinGasPrice
	//
	// MinGasPrice returns current min gas price.
	MinGasPrice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MinGasPriceResponse, error)
	// NetInfo
	//
	// NetInfo returns network info
	NetInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NetInfoResponse, error)
	// Status
	//
	// Status returns node status including pubkey, latest block.
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	// Address
	//
	// Address returns coins list, balance and transaction count of an address.
	Address(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
	// Addresses
	//
	// Addresses returns list of addresses.
	Addresses(ctx context.Context, in *AddressesRequest, opts ...grpc.CallOption) (*AddressesResponse, error)
	// Block
	//
	// Block returns block data at given height.
	Block(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// Candidate
	//
	// Candidate returns candidateâ€™s info by provided public key.
	//
	// {{import "fields.md"}}
	Candidate(ctx context.Context, in *CandidateRequest, opts ...grpc.CallOption) (*CandidateResponse, error)
	// Candidates
	//
	// Candidates returns list of candidates.
	Candidates(ctx context.Context, in *CandidatesRequest, opts ...grpc.CallOption) (*CandidatesResponse, error)
	// CoinInfoById
	//
	// CoinInfoById returns information about coin ID.
	CoinInfoById(ctx context.Context, in *CoinIdRequest, opts ...grpc.CallOption) (*CoinInfoResponse, error)
	// CoinInfo
	//
	// CoinInfo returns information about coin symbol.
	CoinInfo(ctx context.Context, in *CoinInfoRequest, opts ...grpc.CallOption) (*CoinInfoResponse, error)
	// EstimateCoinBuy
	//
	// EstimateCoinBuy returns estimate of buy coin transaction.
	EstimateCoinBuy(ctx context.Context, in *EstimateCoinBuyRequest, opts ...grpc.CallOption) (*EstimateCoinBuyResponse, error)
	// EstimateCoinSell
	//
	// EstimateCoinSell returns estimate of sell coin transaction.
	EstimateCoinSell(ctx context.Context, in *EstimateCoinSellRequest, opts ...grpc.CallOption) (*EstimateCoinSellResponse, error)
	// EstimateCoinSellAll
	//
	// EstimateCoinSellAll returns estimate of sell all coin transaction.
	EstimateCoinSellAll(ctx context.Context, in *EstimateCoinSellAllRequest, opts ...grpc.CallOption) (*EstimateCoinSellAllResponse, error)
	// EstimateTxCommission
	//
	// EstimateTxCommission returns estimate of transaction.
	EstimateTxCommission(ctx context.Context, in *EstimateTxCommissionRequest, opts ...grpc.CallOption) (*EstimateTxCommissionResponse, error)
	// Events
	//
	// Events returns events at given height.
	Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	// MaxGasPrice
	//
	// MaxGasPrice returns current max gas.
	MaxGasPrice(ctx context.Context, in *MaxGasPriceRequest, opts ...grpc.CallOption) (*MaxGasPriceResponse, error)
	// MissedBlocks
	//
	// MissedBlocks returns missed blocks by validator public key.
	MissedBlocks(ctx context.Context, in *MissedBlocksRequest, opts ...grpc.CallOption) (*MissedBlocksResponse, error)
	// SendTransaction
	//
	// SendTransaction returns the result of sending signed tx. To ensure that transaction was successfully committed to the blockchain, you need to find the transaction by the hash and ensure that the status code equals to 0.
	//
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	// Transaction
	//
	// Transaction returns transaction info.
	Transaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// Transactions
	//
	// Transactions returns transactions by query.
	Transactions(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error)
	// UnconfirmedTxs
	//
	// UnconfirmedTxs returns unconfirmed transactions.
	UnconfirmedTxs(ctx context.Context, in *UnconfirmedTxsRequest, opts ...grpc.CallOption) (*UnconfirmedTxsResponse, error)
	// Validators
	//
	// Validators returns list of active validators.
	Validators(ctx context.Context, in *ValidatorsRequest, opts ...grpc.CallOption) (*ValidatorsResponse, error)
	// Frozen
	//
	// Frozen returns frozen balance.
	// Deprecated: Use FrozenAll instead.
	Frozen(ctx context.Context, in *FrozenRequest, opts ...grpc.CallOption) (*FrozenResponse, error)
	// FrozenAll
	//
	// FrozenAll returns frozen balance.
	FrozenAll(ctx context.Context, in *FrozenAllRequest, opts ...grpc.CallOption) (*FrozenResponse, error)
	// WaitList
	//
	// WaitList returns the list of address stakes in waitlist.
	WaitList(ctx context.Context, in *WaitListRequest, opts ...grpc.CallOption) (*WaitListResponse, error)
	// TestBlock
	//
	// TestBlock returns the list of example transactions in block. Available only testnet mode.
	TestBlock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BlockResponse, error)
	// SwapPool
	//
	// SwapPool returns total supply and reserves.
	SwapPool(ctx context.Context, in *SwapPoolRequest, opts ...grpc.CallOption) (*SwapPoolResponse, error)
	// SwapPools
	//
	// SwapPools returns list of all pools.
	SwapPools(ctx context.Context, in *SwapPoolsRequest, opts ...grpc.CallOption) (*SwapPoolsResponse, error)
	// SwapPoolProvider
	//
	// SwapPoolProvider returns reserves and liquidity balance of provider.
	SwapPoolProvider(ctx context.Context, in *SwapPoolProviderRequest, opts ...grpc.CallOption) (*SwapPoolResponse, error)
	// PriceCommission
	//
	// PriceCommission returns commissions.
	PriceCommission(ctx context.Context, in *PriceCommissionRequest, opts ...grpc.CallOption) (*PriceCommissionResponse, error)
	// VersionNetwork
	//
	// VersionNetwork returns versions network.
	VersionNetwork(ctx context.Context, in *VersionNetworkRequest, opts ...grpc.CallOption) (*VersionNetworkResponse, error)
	// CommissionVotes
	//
	// CommissionVotes returns votes for update commissions.
	CommissionVotes(ctx context.Context, in *CommissionVotesRequest, opts ...grpc.CallOption) (*CommissionVotesResponse, error)
	// UpdateVotes
	//
	// UpdateVotes returns votes for update network.
	UpdateVotes(ctx context.Context, in *UpdateVotesRequest, opts ...grpc.CallOption) (*UpdateVotesResponse, error)
	// Blocks
	//
	// Blocks returns blocks at given interval.
	Blocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (*BlocksResponse, error)
	// LimitOrder
	//
	// LimitOrder returns order by ID.
	LimitOrder(ctx context.Context, in *LimitOrderRequest, opts ...grpc.CallOption) (*LimitOrderResponse, error)
	// LimitOrdersOfPool
	//
	// LimitOrdersOfPool returns sell orders for a pair of coins.
	LimitOrdersOfPool(ctx context.Context, in *LimitOrdersOfPoolRequest, opts ...grpc.CallOption) (*LimitOrdersOfPoolResponse, error)
	// LimitOrders
	//
	// LimitOrders returns orders by IDs.
	LimitOrders(ctx context.Context, in *LimitOrdersRequest, opts ...grpc.CallOption) (*LimitOrdersResponse, error)
	// BestTrade
	//
	// BestTrade returns optimal exchange route.
	BestTrade(ctx context.Context, in *BestTradeRequest, opts ...grpc.CallOption) (*BestTradeResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiService_ServiceDesc.Streams[0], "/api_pb.ApiService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type apiServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *apiServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) Halts(ctx context.Context, in *HaltsRequest, opts ...grpc.CallOption) (*HaltsResponse, error) {
	out := new(HaltsResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/Halts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Genesis(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenesisResponse, error) {
	out := new(GenesisResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/Genesis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) MinGasPrice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MinGasPriceResponse, error) {
	out := new(MinGasPriceResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/MinGasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) NetInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NetInfoResponse, error) {
	out := new(NetInfoResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/NetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Address(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Addresses(ctx context.Context, in *AddressesRequest, opts ...grpc.CallOption) (*AddressesResponse, error) {
	out := new(AddressesResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/Addresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Block(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/Block", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Candidate(ctx context.Context, in *CandidateRequest, opts ...grpc.CallOption) (*CandidateResponse, error) {
	out := new(CandidateResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/Candidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Candidates(ctx context.Context, in *CandidatesRequest, opts ...grpc.CallOption) (*CandidatesResponse, error) {
	out := new(CandidatesResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/Candidates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CoinInfoById(ctx context.Context, in *CoinIdRequest, opts ...grpc.CallOption) (*CoinInfoResponse, error) {
	out := new(CoinInfoResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/CoinInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CoinInfo(ctx context.Context, in *CoinInfoRequest, opts ...grpc.CallOption) (*CoinInfoResponse, error) {
	out := new(CoinInfoResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/CoinInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) EstimateCoinBuy(ctx context.Context, in *EstimateCoinBuyRequest, opts ...grpc.CallOption) (*EstimateCoinBuyResponse, error) {
	out := new(EstimateCoinBuyResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/EstimateCoinBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) EstimateCoinSell(ctx context.Context, in *EstimateCoinSellRequest, opts ...grpc.CallOption) (*EstimateCoinSellResponse, error) {
	out := new(EstimateCoinSellResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/EstimateCoinSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) EstimateCoinSellAll(ctx context.Context, in *EstimateCoinSellAllRequest, opts ...grpc.CallOption) (*EstimateCoinSellAllResponse, error) {
	out := new(EstimateCoinSellAllResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/EstimateCoinSellAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) EstimateTxCommission(ctx context.Context, in *EstimateTxCommissionRequest, opts ...grpc.CallOption) (*EstimateTxCommissionResponse, error) {
	out := new(EstimateTxCommissionResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/EstimateTxCommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/Events", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) MaxGasPrice(ctx context.Context, in *MaxGasPriceRequest, opts ...grpc.CallOption) (*MaxGasPriceResponse, error) {
	out := new(MaxGasPriceResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/MaxGasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) MissedBlocks(ctx context.Context, in *MissedBlocksRequest, opts ...grpc.CallOption) (*MissedBlocksResponse, error) {
	out := new(MissedBlocksResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/MissedBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Transaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/Transaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Transactions(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error) {
	out := new(TransactionsResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/Transactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UnconfirmedTxs(ctx context.Context, in *UnconfirmedTxsRequest, opts ...grpc.CallOption) (*UnconfirmedTxsResponse, error) {
	out := new(UnconfirmedTxsResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/UnconfirmedTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Validators(ctx context.Context, in *ValidatorsRequest, opts ...grpc.CallOption) (*ValidatorsResponse, error) {
	out := new(ValidatorsResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/Validators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Frozen(ctx context.Context, in *FrozenRequest, opts ...grpc.CallOption) (*FrozenResponse, error) {
	out := new(FrozenResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/Frozen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) FrozenAll(ctx context.Context, in *FrozenAllRequest, opts ...grpc.CallOption) (*FrozenResponse, error) {
	out := new(FrozenResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/FrozenAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) WaitList(ctx context.Context, in *WaitListRequest, opts ...grpc.CallOption) (*WaitListResponse, error) {
	out := new(WaitListResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/WaitList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) TestBlock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/TestBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SwapPool(ctx context.Context, in *SwapPoolRequest, opts ...grpc.CallOption) (*SwapPoolResponse, error) {
	out := new(SwapPoolResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/SwapPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SwapPools(ctx context.Context, in *SwapPoolsRequest, opts ...grpc.CallOption) (*SwapPoolsResponse, error) {
	out := new(SwapPoolsResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/SwapPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SwapPoolProvider(ctx context.Context, in *SwapPoolProviderRequest, opts ...grpc.CallOption) (*SwapPoolResponse, error) {
	out := new(SwapPoolResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/SwapPoolProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) PriceCommission(ctx context.Context, in *PriceCommissionRequest, opts ...grpc.CallOption) (*PriceCommissionResponse, error) {
	out := new(PriceCommissionResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/PriceCommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) VersionNetwork(ctx context.Context, in *VersionNetworkRequest, opts ...grpc.CallOption) (*VersionNetworkResponse, error) {
	out := new(VersionNetworkResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/VersionNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CommissionVotes(ctx context.Context, in *CommissionVotesRequest, opts ...grpc.CallOption) (*CommissionVotesResponse, error) {
	out := new(CommissionVotesResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/CommissionVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateVotes(ctx context.Context, in *UpdateVotesRequest, opts ...grpc.CallOption) (*UpdateVotesResponse, error) {
	out := new(UpdateVotesResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/UpdateVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Blocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (*BlocksResponse, error) {
	out := new(BlocksResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/Blocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) LimitOrder(ctx context.Context, in *LimitOrderRequest, opts ...grpc.CallOption) (*LimitOrderResponse, error) {
	out := new(LimitOrderResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/LimitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) LimitOrdersOfPool(ctx context.Context, in *LimitOrdersOfPoolRequest, opts ...grpc.CallOption) (*LimitOrdersOfPoolResponse, error) {
	out := new(LimitOrdersOfPoolResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/LimitOrdersOfPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) LimitOrders(ctx context.Context, in *LimitOrdersRequest, opts ...grpc.CallOption) (*LimitOrdersResponse, error) {
	out := new(LimitOrdersResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/LimitOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BestTrade(ctx context.Context, in *BestTradeRequest, opts ...grpc.CallOption) (*BestTradeResponse, error) {
	out := new(BestTradeResponse)
	err := c.cc.Invoke(ctx, "/api_pb.ApiService/BestTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	// Subscribe
	//
	// Subscribe returns a subscription for events by query. Only supported in WS and gRPC methods.
	Subscribe(*SubscribeRequest, ApiService_SubscribeServer) error
	// Halts
	//
	// Halts returns the candidate votes for stopping the network at block.
	Halts(context.Context, *HaltsRequest) (*HaltsResponse, error)
	// Genesis
	//
	// Genesis returns genesis file.
	Genesis(context.Context, *emptypb.Empty) (*GenesisResponse, error)
	// MinGasPrice
	//
	// MinGasPrice returns current min gas price.
	MinGasPrice(context.Context, *emptypb.Empty) (*MinGasPriceResponse, error)
	// NetInfo
	//
	// NetInfo returns network info
	NetInfo(context.Context, *emptypb.Empty) (*NetInfoResponse, error)
	// Status
	//
	// Status returns node status including pubkey, latest block.
	Status(context.Context, *emptypb.Empty) (*StatusResponse, error)
	// Address
	//
	// Address returns coins list, balance and transaction count of an address.
	Address(context.Context, *AddressRequest) (*AddressResponse, error)
	// Addresses
	//
	// Addresses returns list of addresses.
	Addresses(context.Context, *AddressesRequest) (*AddressesResponse, error)
	// Block
	//
	// Block returns block data at given height.
	Block(context.Context, *BlockRequest) (*BlockResponse, error)
	// Candidate
	//
	// Candidate returns candidateâ€™s info by provided public key.
	//
	// {{import "fields.md"}}
	Candidate(context.Context, *CandidateRequest) (*CandidateResponse, error)
	// Candidates
	//
	// Candidates returns list of candidates.
	Candidates(context.Context, *CandidatesRequest) (*CandidatesResponse, error)
	// CoinInfoById
	//
	// CoinInfoById returns information about coin ID.
	CoinInfoById(context.Context, *CoinIdRequest) (*CoinInfoResponse, error)
	// CoinInfo
	//
	// CoinInfo returns information about coin symbol.
	CoinInfo(context.Context, *CoinInfoRequest) (*CoinInfoResponse, error)
	// EstimateCoinBuy
	//
	// EstimateCoinBuy returns estimate of buy coin transaction.
	EstimateCoinBuy(context.Context, *EstimateCoinBuyRequest) (*EstimateCoinBuyResponse, error)
	// EstimateCoinSell
	//
	// EstimateCoinSell returns estimate of sell coin transaction.
	EstimateCoinSell(context.Context, *EstimateCoinSellRequest) (*EstimateCoinSellResponse, error)
	// EstimateCoinSellAll
	//
	// EstimateCoinSellAll returns estimate of sell all coin transaction.
	EstimateCoinSellAll(context.Context, *EstimateCoinSellAllRequest) (*EstimateCoinSellAllResponse, error)
	// EstimateTxCommission
	//
	// EstimateTxCommission returns estimate of transaction.
	EstimateTxCommission(context.Context, *EstimateTxCommissionRequest) (*EstimateTxCommissionResponse, error)
	// Events
	//
	// Events returns events at given height.
	Events(context.Context, *EventsRequest) (*EventsResponse, error)
	// MaxGasPrice
	//
	// MaxGasPrice returns current max gas.
	MaxGasPrice(context.Context, *MaxGasPriceRequest) (*MaxGasPriceResponse, error)
	// MissedBlocks
	//
	// MissedBlocks returns missed blocks by validator public key.
	MissedBlocks(context.Context, *MissedBlocksRequest) (*MissedBlocksResponse, error)
	// SendTransaction
	//
	// SendTransaction returns the result of sending signed tx. To ensure that transaction was successfully committed to the blockchain, you need to find the transaction by the hash and ensure that the status code equals to 0.
	//
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
	// Transaction
	//
	// Transaction returns transaction info.
	Transaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	// Transactions
	//
	// Transactions returns transactions by query.
	Transactions(context.Context, *TransactionsRequest) (*TransactionsResponse, error)
	// UnconfirmedTxs
	//
	// UnconfirmedTxs returns unconfirmed transactions.
	UnconfirmedTxs(context.Context, *UnconfirmedTxsRequest) (*UnconfirmedTxsResponse, error)
	// Validators
	//
	// Validators returns list of active validators.
	Validators(context.Context, *ValidatorsRequest) (*ValidatorsResponse, error)
	// Frozen
	//
	// Frozen returns frozen balance.
	// Deprecated: Use FrozenAll instead.
	Frozen(context.Context, *FrozenRequest) (*FrozenResponse, error)
	// FrozenAll
	//
	// FrozenAll returns frozen balance.
	FrozenAll(context.Context, *FrozenAllRequest) (*FrozenResponse, error)
	// WaitList
	//
	// WaitList returns the list of address stakes in waitlist.
	WaitList(context.Context, *WaitListRequest) (*WaitListResponse, error)
	// TestBlock
	//
	// TestBlock returns the list of example transactions in block. Available only testnet mode.
	TestBlock(context.Context, *emptypb.Empty) (*BlockResponse, error)
	// SwapPool
	//
	// SwapPool returns total supply and reserves.
	SwapPool(context.Context, *SwapPoolRequest) (*SwapPoolResponse, error)
	// SwapPools
	//
	// SwapPools returns list of all pools.
	SwapPools(context.Context, *SwapPoolsRequest) (*SwapPoolsResponse, error)
	// SwapPoolProvider
	//
	// SwapPoolProvider returns reserves and liquidity balance of provider.
	SwapPoolProvider(context.Context, *SwapPoolProviderRequest) (*SwapPoolResponse, error)
	// PriceCommission
	//
	// PriceCommission returns commissions.
	PriceCommission(context.Context, *PriceCommissionRequest) (*PriceCommissionResponse, error)
	// VersionNetwork
	//
	// VersionNetwork returns versions network.
	VersionNetwork(context.Context, *VersionNetworkRequest) (*VersionNetworkResponse, error)
	// CommissionVotes
	//
	// CommissionVotes returns votes for update commissions.
	CommissionVotes(context.Context, *CommissionVotesRequest) (*CommissionVotesResponse, error)
	// UpdateVotes
	//
	// UpdateVotes returns votes for update network.
	UpdateVotes(context.Context, *UpdateVotesRequest) (*UpdateVotesResponse, error)
	// Blocks
	//
	// Blocks returns blocks at given interval.
	Blocks(context.Context, *BlocksRequest) (*BlocksResponse, error)
	// LimitOrder
	//
	// LimitOrder returns order by ID.
	LimitOrder(context.Context, *LimitOrderRequest) (*LimitOrderResponse, error)
	// LimitOrdersOfPool
	//
	// LimitOrdersOfPool returns sell orders for a pair of coins.
	LimitOrdersOfPool(context.Context, *LimitOrdersOfPoolRequest) (*LimitOrdersOfPoolResponse, error)
	// LimitOrders
	//
	// LimitOrders returns orders by IDs.
	LimitOrders(context.Context, *LimitOrdersRequest) (*LimitOrdersResponse, error)
	// BestTrade
	//
	// BestTrade returns optimal exchange route.
	BestTrade(context.Context, *BestTradeRequest) (*BestTradeResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) Subscribe(*SubscribeRequest, ApiService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedApiServiceServer) Halts(context.Context, *HaltsRequest) (*HaltsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Halts not implemented")
}
func (UnimplementedApiServiceServer) Genesis(context.Context, *emptypb.Empty) (*GenesisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Genesis not implemented")
}
func (UnimplementedApiServiceServer) MinGasPrice(context.Context, *emptypb.Empty) (*MinGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinGasPrice not implemented")
}
func (UnimplementedApiServiceServer) NetInfo(context.Context, *emptypb.Empty) (*NetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetInfo not implemented")
}
func (UnimplementedApiServiceServer) Status(context.Context, *emptypb.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedApiServiceServer) Address(context.Context, *AddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Address not implemented")
}
func (UnimplementedApiServiceServer) Addresses(context.Context, *AddressesRequest) (*AddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Addresses not implemented")
}
func (UnimplementedApiServiceServer) Block(context.Context, *BlockRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Block not implemented")
}
func (UnimplementedApiServiceServer) Candidate(context.Context, *CandidateRequest) (*CandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Candidate not implemented")
}
func (UnimplementedApiServiceServer) Candidates(context.Context, *CandidatesRequest) (*CandidatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Candidates not implemented")
}
func (UnimplementedApiServiceServer) CoinInfoById(context.Context, *CoinIdRequest) (*CoinInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinInfoById not implemented")
}
func (UnimplementedApiServiceServer) CoinInfo(context.Context, *CoinInfoRequest) (*CoinInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinInfo not implemented")
}
func (UnimplementedApiServiceServer) EstimateCoinBuy(context.Context, *EstimateCoinBuyRequest) (*EstimateCoinBuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateCoinBuy not implemented")
}
func (UnimplementedApiServiceServer) EstimateCoinSell(context.Context, *EstimateCoinSellRequest) (*EstimateCoinSellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateCoinSell not implemented")
}
func (UnimplementedApiServiceServer) EstimateCoinSellAll(context.Context, *EstimateCoinSellAllRequest) (*EstimateCoinSellAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateCoinSellAll not implemented")
}
func (UnimplementedApiServiceServer) EstimateTxCommission(context.Context, *EstimateTxCommissionRequest) (*EstimateTxCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateTxCommission not implemented")
}
func (UnimplementedApiServiceServer) Events(context.Context, *EventsRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedApiServiceServer) MaxGasPrice(context.Context, *MaxGasPriceRequest) (*MaxGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxGasPrice not implemented")
}
func (UnimplementedApiServiceServer) MissedBlocks(context.Context, *MissedBlocksRequest) (*MissedBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MissedBlocks not implemented")
}
func (UnimplementedApiServiceServer) SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedApiServiceServer) Transaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transaction not implemented")
}
func (UnimplementedApiServiceServer) Transactions(context.Context, *TransactionsRequest) (*TransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transactions not implemented")
}
func (UnimplementedApiServiceServer) UnconfirmedTxs(context.Context, *UnconfirmedTxsRequest) (*UnconfirmedTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnconfirmedTxs not implemented")
}
func (UnimplementedApiServiceServer) Validators(context.Context, *ValidatorsRequest) (*ValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validators not implemented")
}
func (UnimplementedApiServiceServer) Frozen(context.Context, *FrozenRequest) (*FrozenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Frozen not implemented")
}
func (UnimplementedApiServiceServer) FrozenAll(context.Context, *FrozenAllRequest) (*FrozenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrozenAll not implemented")
}
func (UnimplementedApiServiceServer) WaitList(context.Context, *WaitListRequest) (*WaitListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitList not implemented")
}
func (UnimplementedApiServiceServer) TestBlock(context.Context, *emptypb.Empty) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestBlock not implemented")
}
func (UnimplementedApiServiceServer) SwapPool(context.Context, *SwapPoolRequest) (*SwapPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapPool not implemented")
}
func (UnimplementedApiServiceServer) SwapPools(context.Context, *SwapPoolsRequest) (*SwapPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapPools not implemented")
}
func (UnimplementedApiServiceServer) SwapPoolProvider(context.Context, *SwapPoolProviderRequest) (*SwapPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapPoolProvider not implemented")
}
func (UnimplementedApiServiceServer) PriceCommission(context.Context, *PriceCommissionRequest) (*PriceCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceCommission not implemented")
}
func (UnimplementedApiServiceServer) VersionNetwork(context.Context, *VersionNetworkRequest) (*VersionNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VersionNetwork not implemented")
}
func (UnimplementedApiServiceServer) CommissionVotes(context.Context, *CommissionVotesRequest) (*CommissionVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommissionVotes not implemented")
}
func (UnimplementedApiServiceServer) UpdateVotes(context.Context, *UpdateVotesRequest) (*UpdateVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVotes not implemented")
}
func (UnimplementedApiServiceServer) Blocks(context.Context, *BlocksRequest) (*BlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blocks not implemented")
}
func (UnimplementedApiServiceServer) LimitOrder(context.Context, *LimitOrderRequest) (*LimitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrder not implemented")
}
func (UnimplementedApiServiceServer) LimitOrdersOfPool(context.Context, *LimitOrdersOfPoolRequest) (*LimitOrdersOfPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrdersOfPool not implemented")
}
func (UnimplementedApiServiceServer) LimitOrders(context.Context, *LimitOrdersRequest) (*LimitOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrders not implemented")
}
func (UnimplementedApiServiceServer) BestTrade(context.Context, *BestTradeRequest) (*BestTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BestTrade not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).Subscribe(m, &apiServiceSubscribeServer{stream})
}

type ApiService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type apiServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *apiServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiService_Halts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HaltsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Halts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/Halts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Halts(ctx, req.(*HaltsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Genesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Genesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/Genesis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Genesis(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_MinGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).MinGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/MinGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).MinGasPrice(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_NetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).NetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/NetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).NetInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Address(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Addresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Addresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/Addresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Addresses(ctx, req.(*AddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/Block",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Block(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Candidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Candidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/Candidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Candidate(ctx, req.(*CandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Candidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandidatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Candidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/Candidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Candidates(ctx, req.(*CandidatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CoinInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CoinInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/CoinInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CoinInfoById(ctx, req.(*CoinIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CoinInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CoinInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/CoinInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CoinInfo(ctx, req.(*CoinInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_EstimateCoinBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateCoinBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).EstimateCoinBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/EstimateCoinBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).EstimateCoinBuy(ctx, req.(*EstimateCoinBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_EstimateCoinSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateCoinSellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).EstimateCoinSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/EstimateCoinSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).EstimateCoinSell(ctx, req.(*EstimateCoinSellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_EstimateCoinSellAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateCoinSellAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).EstimateCoinSellAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/EstimateCoinSellAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).EstimateCoinSellAll(ctx, req.(*EstimateCoinSellAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_EstimateTxCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateTxCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).EstimateTxCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/EstimateTxCommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).EstimateTxCommission(ctx, req.(*EstimateTxCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Events_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Events(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/Events",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Events(ctx, req.(*EventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_MaxGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaxGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).MaxGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/MaxGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).MaxGasPrice(ctx, req.(*MaxGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_MissedBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissedBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).MissedBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/MissedBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).MissedBlocks(ctx, req.(*MissedBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Transaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Transaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/Transaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Transaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Transactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Transactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/Transactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Transactions(ctx, req.(*TransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UnconfirmedTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnconfirmedTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UnconfirmedTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/UnconfirmedTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UnconfirmedTxs(ctx, req.(*UnconfirmedTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Validators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Validators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/Validators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Validators(ctx, req.(*ValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Frozen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrozenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Frozen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/Frozen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Frozen(ctx, req.(*FrozenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_FrozenAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrozenAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).FrozenAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/FrozenAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).FrozenAll(ctx, req.(*FrozenAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_WaitList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).WaitList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/WaitList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).WaitList(ctx, req.(*WaitListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_TestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).TestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/TestBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).TestBlock(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SwapPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SwapPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/SwapPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SwapPool(ctx, req.(*SwapPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SwapPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SwapPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/SwapPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SwapPools(ctx, req.(*SwapPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SwapPoolProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapPoolProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SwapPoolProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/SwapPoolProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SwapPoolProvider(ctx, req.(*SwapPoolProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_PriceCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).PriceCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/PriceCommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).PriceCommission(ctx, req.(*PriceCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_VersionNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).VersionNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/VersionNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).VersionNetwork(ctx, req.(*VersionNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CommissionVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommissionVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CommissionVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/CommissionVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CommissionVotes(ctx, req.(*CommissionVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/UpdateVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateVotes(ctx, req.(*UpdateVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Blocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Blocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/Blocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Blocks(ctx, req.(*BlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_LimitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).LimitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/LimitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).LimitOrder(ctx, req.(*LimitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_LimitOrdersOfPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitOrdersOfPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).LimitOrdersOfPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/LimitOrdersOfPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).LimitOrdersOfPool(ctx, req.(*LimitOrdersOfPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_LimitOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).LimitOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/LimitOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).LimitOrders(ctx, req.(*LimitOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BestTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BestTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BestTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.ApiService/BestTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BestTrade(ctx, req.(*BestTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_pb.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Halts",
			Handler:    _ApiService_Halts_Handler,
		},
		{
			MethodName: "Genesis",
			Handler:    _ApiService_Genesis_Handler,
		},
		{
			MethodName: "MinGasPrice",
			Handler:    _ApiService_MinGasPrice_Handler,
		},
		{
			MethodName: "NetInfo",
			Handler:    _ApiService_NetInfo_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _ApiService_Status_Handler,
		},
		{
			MethodName: "Address",
			Handler:    _ApiService_Address_Handler,
		},
		{
			MethodName: "Addresses",
			Handler:    _ApiService_Addresses_Handler,
		},
		{
			MethodName: "Block",
			Handler:    _ApiService_Block_Handler,
		},
		{
			MethodName: "Candidate",
			Handler:    _ApiService_Candidate_Handler,
		},
		{
			MethodName: "Candidates",
			Handler:    _ApiService_Candidates_Handler,
		},
		{
			MethodName: "CoinInfoById",
			Handler:    _ApiService_CoinInfoById_Handler,
		},
		{
			MethodName: "CoinInfo",
			Handler:    _ApiService_CoinInfo_Handler,
		},
		{
			MethodName: "EstimateCoinBuy",
			Handler:    _ApiService_EstimateCoinBuy_Handler,
		},
		{
			MethodName: "EstimateCoinSell",
			Handler:    _ApiService_EstimateCoinSell_Handler,
		},
		{
			MethodName: "EstimateCoinSellAll",
			Handler:    _ApiService_EstimateCoinSellAll_Handler,
		},
		{
			MethodName: "EstimateTxCommission",
			Handler:    _ApiService_EstimateTxCommission_Handler,
		},
		{
			MethodName: "Events",
			Handler:    _ApiService_Events_Handler,
		},
		{
			MethodName: "MaxGasPrice",
			Handler:    _ApiService_MaxGasPrice_Handler,
		},
		{
			MethodName: "MissedBlocks",
			Handler:    _ApiService_MissedBlocks_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _ApiService_SendTransaction_Handler,
		},
		{
			MethodName: "Transaction",
			Handler:    _ApiService_Transaction_Handler,
		},
		{
			MethodName: "Transactions",
			Handler:    _ApiService_Transactions_Handler,
		},
		{
			MethodName: "UnconfirmedTxs",
			Handler:    _ApiService_UnconfirmedTxs_Handler,
		},
		{
			MethodName: "Validators",
			Handler:    _ApiService_Validators_Handler,
		},
		{
			MethodName: "Frozen",
			Handler:    _ApiService_Frozen_Handler,
		},
		{
			MethodName: "FrozenAll",
			Handler:    _ApiService_FrozenAll_Handler,
		},
		{
			MethodName: "WaitList",
			Handler:    _ApiService_WaitList_Handler,
		},
		{
			MethodName: "TestBlock",
			Handler:    _ApiService_TestBlock_Handler,
		},
		{
			MethodName: "SwapPool",
			Handler:    _ApiService_SwapPool_Handler,
		},
		{
			MethodName: "SwapPools",
			Handler:    _ApiService_SwapPools_Handler,
		},
		{
			MethodName: "SwapPoolProvider",
			Handler:    _ApiService_SwapPoolProvider_Handler,
		},
		{
			MethodName: "PriceCommission",
			Handler:    _ApiService_PriceCommission_Handler,
		},
		{
			MethodName: "VersionNetwork",
			Handler:    _ApiService_VersionNetwork_Handler,
		},
		{
			MethodName: "CommissionVotes",
			Handler:    _ApiService_CommissionVotes_Handler,
		},
		{
			MethodName: "UpdateVotes",
			Handler:    _ApiService_UpdateVotes_Handler,
		},
		{
			MethodName: "Blocks",
			Handler:    _ApiService_Blocks_Handler,
		},
		{
			MethodName: "LimitOrder",
			Handler:    _ApiService_LimitOrder_Handler,
		},
		{
			MethodName: "LimitOrdersOfPool",
			Handler:    _ApiService_LimitOrdersOfPool_Handler,
		},
		{
			MethodName: "LimitOrders",
			Handler:    _ApiService_LimitOrders_Handler,
		},
		{
			MethodName: "BestTrade",
			Handler:    _ApiService_BestTrade_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ApiService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
