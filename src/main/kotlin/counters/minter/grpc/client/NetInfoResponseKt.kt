//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: resources.proto

package counters.minter.grpc.client;

@kotlin.jvm.JvmSynthetic
inline fun netInfoResponse(block: counters.minter.grpc.client.NetInfoResponseKt.Dsl.() -> Unit): counters.minter.grpc.client.NetInfoResponse =
  counters.minter.grpc.client.NetInfoResponseKt.Dsl._create(counters.minter.grpc.client.NetInfoResponse.newBuilder()).apply { block() }._build()
object NetInfoResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: counters.minter.grpc.client.NetInfoResponse.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: counters.minter.grpc.client.NetInfoResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): counters.minter.grpc.client.NetInfoResponse = _builder.build()

    /**
     * <code>bool listening = 4;</code>
     */
    var listening: kotlin.Boolean
      @JvmName("getListening")
      get() = _builder.getListening()
      @JvmName("setListening")
      set(value) {
        _builder.setListening(value)
      }
    /**
     * <code>bool listening = 4;</code>
     */
    fun clearListening() {
      _builder.clearListening()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class ListenersProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated string listeners = 1;</code>
     * @return A list containing the listeners.
     */
    val listeners: com.google.protobuf.kotlin.DslList<kotlin.String, ListenersProxy>
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getListenersList()
      )
    /**
     * <code>repeated string listeners = 1;</code>
     * @param value The listeners to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addListeners")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, ListenersProxy>.add(value: kotlin.String) {
      _builder.addListeners(value)
    }
    /**
     * <code>repeated string listeners = 1;</code>
     * @param value The listeners to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignListeners")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.String, ListenersProxy>.plusAssign(value: kotlin.String) {
      _builder.addListeners(value)
    }
    /**
     * <code>repeated string listeners = 1;</code>
     * @param values The listeners to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllListeners")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, ListenersProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllListeners(values)
    }
    /**
     * <code>repeated string listeners = 1;</code>
     * @param values The listeners to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllListeners")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.String, ListenersProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllListeners(values)
    }
    /**
     * <code>repeated string listeners = 1;</code>
     * @param index The index to set the value at.
     * @param value The listeners to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setListeners")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.String, ListenersProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setListeners(index, value)
    }/**
     * <code>repeated string listeners = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearListeners")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, ListenersProxy>.clear() {
      _builder.clearListeners()
    }
    /**
     * <code>int64 count_peers = 2;</code>
     */
    var countPeers: kotlin.Long
      @JvmName("getCountPeers")
      get() = _builder.getCountPeers()
      @JvmName("setCountPeers")
      set(value) {
        _builder.setCountPeers(value)
      }
    /**
     * <code>int64 count_peers = 2;</code>
     */
    fun clearCountPeers() {
      _builder.clearCountPeers()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PeersProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .api_pb.NetInfoResponse.Peer peers = 3;</code>
     */
     val peers: com.google.protobuf.kotlin.DslList<counters.minter.grpc.client.NetInfoResponse.Peer, PeersProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPeersList()
      )
    /**
     * <code>repeated .api_pb.NetInfoResponse.Peer peers = 3;</code>
     * @param value The peers to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPeers")
    fun com.google.protobuf.kotlin.DslList<counters.minter.grpc.client.NetInfoResponse.Peer, PeersProxy>.add(value: counters.minter.grpc.client.NetInfoResponse.Peer) {
      _builder.addPeers(value)
    }/**
     * <code>repeated .api_pb.NetInfoResponse.Peer peers = 3;</code>
     * @param value The peers to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPeers")
    inline operator fun com.google.protobuf.kotlin.DslList<counters.minter.grpc.client.NetInfoResponse.Peer, PeersProxy>.plusAssign(value: counters.minter.grpc.client.NetInfoResponse.Peer) {
      add(value)
    }/**
     * <code>repeated .api_pb.NetInfoResponse.Peer peers = 3;</code>
     * @param values The peers to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPeers")
    fun com.google.protobuf.kotlin.DslList<counters.minter.grpc.client.NetInfoResponse.Peer, PeersProxy>.addAll(values: kotlin.collections.Iterable<counters.minter.grpc.client.NetInfoResponse.Peer>) {
      _builder.addAllPeers(values)
    }/**
     * <code>repeated .api_pb.NetInfoResponse.Peer peers = 3;</code>
     * @param values The peers to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPeers")
    inline operator fun com.google.protobuf.kotlin.DslList<counters.minter.grpc.client.NetInfoResponse.Peer, PeersProxy>.plusAssign(values: kotlin.collections.Iterable<counters.minter.grpc.client.NetInfoResponse.Peer>) {
      addAll(values)
    }/**
     * <code>repeated .api_pb.NetInfoResponse.Peer peers = 3;</code>
     * @param index The index to set the value at.
     * @param value The peers to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPeers")
    operator fun com.google.protobuf.kotlin.DslList<counters.minter.grpc.client.NetInfoResponse.Peer, PeersProxy>.set(index: kotlin.Int, value: counters.minter.grpc.client.NetInfoResponse.Peer) {
      _builder.setPeers(index, value)
    }/**
     * <code>repeated .api_pb.NetInfoResponse.Peer peers = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPeers")
    fun com.google.protobuf.kotlin.DslList<counters.minter.grpc.client.NetInfoResponse.Peer, PeersProxy>.clear() {
      _builder.clearPeers()
    }}
  @kotlin.jvm.JvmSynthetic
  inline fun peer(block: counters.minter.grpc.client.NetInfoResponseKt.PeerKt.Dsl.() -> Unit): counters.minter.grpc.client.NetInfoResponse.Peer =
    counters.minter.grpc.client.NetInfoResponseKt.PeerKt.Dsl._create(counters.minter.grpc.client.NetInfoResponse.Peer.newBuilder()).apply { block() }._build()
  object PeerKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: counters.minter.grpc.client.NetInfoResponse.Peer.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: counters.minter.grpc.client.NetInfoResponse.Peer.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): counters.minter.grpc.client.NetInfoResponse.Peer = _builder.build()

      /**
       * <pre>
       * Unknown while client is in fast_syncing mode
       * </pre>
       *
       * <code>.google.protobuf.UInt64Value latest_block_height = 5;</code>
       */
      var latestBlockHeight: com.google.protobuf.UInt64Value
        @JvmName("getLatestBlockHeight")
        get() = _builder.getLatestBlockHeight()
        @JvmName("setLatestBlockHeight")
        set(value) {
          _builder.setLatestBlockHeight(value)
        }
      /**
       * <pre>
       * Unknown while client is in fast_syncing mode
       * </pre>
       *
       * <code>.google.protobuf.UInt64Value latest_block_height = 5;</code>
       */
      fun clearLatestBlockHeight() {
        _builder.clearLatestBlockHeight()
      }
      /**
       * <pre>
       * Unknown while client is in fast_syncing mode
       * </pre>
       *
       * <code>.google.protobuf.UInt64Value latest_block_height = 5;</code>
       * @return Whether the latestBlockHeight field is set.
       */
      fun hasLatestBlockHeight(): kotlin.Boolean {
        return _builder.hasLatestBlockHeight()
      }

      /**
       * <code>.api_pb.NodeInfo node_info = 4;</code>
       */
      var nodeInfo: counters.minter.grpc.client.NodeInfo
        @JvmName("getNodeInfo")
        get() = _builder.getNodeInfo()
        @JvmName("setNodeInfo")
        set(value) {
          _builder.setNodeInfo(value)
        }
      /**
       * <code>.api_pb.NodeInfo node_info = 4;</code>
       */
      fun clearNodeInfo() {
        _builder.clearNodeInfo()
      }
      /**
       * <code>.api_pb.NodeInfo node_info = 4;</code>
       * @return Whether the nodeInfo field is set.
       */
      fun hasNodeInfo(): kotlin.Boolean {
        return _builder.hasNodeInfo()
      }

      /**
       * <code>bool is_outbound = 1;</code>
       */
      var isOutbound: kotlin.Boolean
        @JvmName("getIsOutbound")
        get() = _builder.getIsOutbound()
        @JvmName("setIsOutbound")
        set(value) {
          _builder.setIsOutbound(value)
        }
      /**
       * <code>bool is_outbound = 1;</code>
       */
      fun clearIsOutbound() {
        _builder.clearIsOutbound()
      }

      /**
       * <code>.api_pb.NetInfoResponse.Peer.ConnectionStatus connection_status = 2;</code>
       */
      var connectionStatus: counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus
        @JvmName("getConnectionStatus")
        get() = _builder.getConnectionStatus()
        @JvmName("setConnectionStatus")
        set(value) {
          _builder.setConnectionStatus(value)
        }
      /**
       * <code>.api_pb.NetInfoResponse.Peer.ConnectionStatus connection_status = 2;</code>
       */
      fun clearConnectionStatus() {
        _builder.clearConnectionStatus()
      }
      /**
       * <code>.api_pb.NetInfoResponse.Peer.ConnectionStatus connection_status = 2;</code>
       * @return Whether the connectionStatus field is set.
       */
      fun hasConnectionStatus(): kotlin.Boolean {
        return _builder.hasConnectionStatus()
      }

      /**
       * <code>string remote_ip = 3;</code>
       */
      var remoteIp: kotlin.String
        @JvmName("getRemoteIp")
        get() = _builder.getRemoteIp()
        @JvmName("setRemoteIp")
        set(value) {
          _builder.setRemoteIp(value)
        }
      /**
       * <code>string remote_ip = 3;</code>
       */
      fun clearRemoteIp() {
        _builder.clearRemoteIp()
      }
    }
    @kotlin.jvm.JvmSynthetic
    inline fun connectionStatus(block: counters.minter.grpc.client.NetInfoResponseKt.PeerKt.ConnectionStatusKt.Dsl.() -> Unit): counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus =
      counters.minter.grpc.client.NetInfoResponseKt.PeerKt.ConnectionStatusKt.Dsl._create(counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.newBuilder()).apply { block() }._build()
    object ConnectionStatusKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      class Dsl private constructor(
        @kotlin.jvm.JvmField private val _builder: counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Builder
      ) {
        companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus = _builder.build()

        /**
         * <code>uint64 duration = 4;</code>
         */
        var duration: kotlin.Long
          @JvmName("getDuration")
          get() = _builder.getDuration()
          @JvmName("setDuration")
          set(value) {
            _builder.setDuration(value)
          }
        /**
         * <code>uint64 duration = 4;</code>
         */
        fun clearDuration() {
          _builder.clearDuration()
        }

        /**
         * <code>.api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor SendMonitor = 1;</code>
         */
        var sendMonitor: counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Monitor
          @JvmName("getSendMonitor")
          get() = _builder.getSendMonitor()
          @JvmName("setSendMonitor")
          set(value) {
            _builder.setSendMonitor(value)
          }
        /**
         * <code>.api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor SendMonitor = 1;</code>
         */
        fun clearSendMonitor() {
          _builder.clearSendMonitor()
        }
        /**
         * <code>.api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor SendMonitor = 1;</code>
         * @return Whether the sendMonitor field is set.
         */
        fun hasSendMonitor(): kotlin.Boolean {
          return _builder.hasSendMonitor()
        }

        /**
         * <code>.api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor RecvMonitor = 2;</code>
         */
        var recvMonitor: counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Monitor
          @JvmName("getRecvMonitor")
          get() = _builder.getRecvMonitor()
          @JvmName("setRecvMonitor")
          set(value) {
            _builder.setRecvMonitor(value)
          }
        /**
         * <code>.api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor RecvMonitor = 2;</code>
         */
        fun clearRecvMonitor() {
          _builder.clearRecvMonitor()
        }
        /**
         * <code>.api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor RecvMonitor = 2;</code>
         * @return Whether the recvMonitor field is set.
         */
        fun hasRecvMonitor(): kotlin.Boolean {
          return _builder.hasRecvMonitor()
        }

        /**
         * An uninstantiable, behaviorless type to represent the field in
         * generics.
         */
        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
        class ChannelsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
        /**
         * <code>repeated .api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel channels = 3;</code>
         */
         val channels: com.google.protobuf.kotlin.DslList<counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel, ChannelsProxy>
          @kotlin.jvm.JvmSynthetic
          get() = com.google.protobuf.kotlin.DslList(
            _builder.getChannelsList()
          )
        /**
         * <code>repeated .api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel channels = 3;</code>
         * @param value The channels to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("addChannels")
        fun com.google.protobuf.kotlin.DslList<counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel, ChannelsProxy>.add(value: counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel) {
          _builder.addChannels(value)
        }/**
         * <code>repeated .api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel channels = 3;</code>
         * @param value The channels to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("plusAssignChannels")
        inline operator fun com.google.protobuf.kotlin.DslList<counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel, ChannelsProxy>.plusAssign(value: counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel) {
          add(value)
        }/**
         * <code>repeated .api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel channels = 3;</code>
         * @param values The channels to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("addAllChannels")
        fun com.google.protobuf.kotlin.DslList<counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel, ChannelsProxy>.addAll(values: kotlin.collections.Iterable<counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel>) {
          _builder.addAllChannels(values)
        }/**
         * <code>repeated .api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel channels = 3;</code>
         * @param values The channels to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("plusAssignAllChannels")
        inline operator fun com.google.protobuf.kotlin.DslList<counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel, ChannelsProxy>.plusAssign(values: kotlin.collections.Iterable<counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel>) {
          addAll(values)
        }/**
         * <code>repeated .api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel channels = 3;</code>
         * @param index The index to set the value at.
         * @param value The channels to set.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("setChannels")
        operator fun com.google.protobuf.kotlin.DslList<counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel, ChannelsProxy>.set(index: kotlin.Int, value: counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel) {
          _builder.setChannels(index, value)
        }/**
         * <code>repeated .api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel channels = 3;</code>
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("clearChannels")
        fun com.google.protobuf.kotlin.DslList<counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel, ChannelsProxy>.clear() {
          _builder.clearChannels()
        }}
      @kotlin.jvm.JvmSynthetic
      inline fun monitor(block: counters.minter.grpc.client.NetInfoResponseKt.PeerKt.ConnectionStatusKt.MonitorKt.Dsl.() -> Unit): counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Monitor =
        counters.minter.grpc.client.NetInfoResponseKt.PeerKt.ConnectionStatusKt.MonitorKt.Dsl._create(counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Monitor.newBuilder()).apply { block() }._build()
      object MonitorKt {
        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
        @com.google.protobuf.kotlin.ProtoDslMarker
        class Dsl private constructor(
          @kotlin.jvm.JvmField private val _builder: counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Monitor.Builder
        ) {
          companion object {
            @kotlin.jvm.JvmSynthetic
            @kotlin.PublishedApi
            internal fun _create(builder: counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Monitor.Builder): Dsl = Dsl(builder)
          }

          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _build(): counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Monitor = _builder.build()

          /**
           * <code>bool active = 13;</code>
           */
          var active: kotlin.Boolean
            @JvmName("getActive")
            get() = _builder.getActive()
            @JvmName("setActive")
            set(value) {
              _builder.setActive(value)
            }
          /**
           * <code>bool active = 13;</code>
           */
          fun clearActive() {
            _builder.clearActive()
          }

          /**
           * <code>string start = 1;</code>
           */
          var start: kotlin.String
            @JvmName("getStart")
            get() = _builder.getStart()
            @JvmName("setStart")
            set(value) {
              _builder.setStart(value)
            }
          /**
           * <code>string start = 1;</code>
           */
          fun clearStart() {
            _builder.clearStart()
          }

          /**
           * <code>int64 duration = 2;</code>
           */
          var duration: kotlin.Long
            @JvmName("getDuration")
            get() = _builder.getDuration()
            @JvmName("setDuration")
            set(value) {
              _builder.setDuration(value)
            }
          /**
           * <code>int64 duration = 2;</code>
           */
          fun clearDuration() {
            _builder.clearDuration()
          }

          /**
           * <code>int64 idle = 3;</code>
           */
          var idle: kotlin.Long
            @JvmName("getIdle")
            get() = _builder.getIdle()
            @JvmName("setIdle")
            set(value) {
              _builder.setIdle(value)
            }
          /**
           * <code>int64 idle = 3;</code>
           */
          fun clearIdle() {
            _builder.clearIdle()
          }

          /**
           * <code>int64 bytes = 4;</code>
           */
          var bytes: kotlin.Long
            @JvmName("getBytes")
            get() = _builder.getBytes()
            @JvmName("setBytes")
            set(value) {
              _builder.setBytes(value)
            }
          /**
           * <code>int64 bytes = 4;</code>
           */
          fun clearBytes() {
            _builder.clearBytes()
          }

          /**
           * <code>int64 samples = 5;</code>
           */
          var samples: kotlin.Long
            @JvmName("getSamples")
            get() = _builder.getSamples()
            @JvmName("setSamples")
            set(value) {
              _builder.setSamples(value)
            }
          /**
           * <code>int64 samples = 5;</code>
           */
          fun clearSamples() {
            _builder.clearSamples()
          }

          /**
           * <code>int64 inst_rate = 6;</code>
           */
          var instRate: kotlin.Long
            @JvmName("getInstRate")
            get() = _builder.getInstRate()
            @JvmName("setInstRate")
            set(value) {
              _builder.setInstRate(value)
            }
          /**
           * <code>int64 inst_rate = 6;</code>
           */
          fun clearInstRate() {
            _builder.clearInstRate()
          }

          /**
           * <code>int64 cur_rate = 7;</code>
           */
          var curRate: kotlin.Long
            @JvmName("getCurRate")
            get() = _builder.getCurRate()
            @JvmName("setCurRate")
            set(value) {
              _builder.setCurRate(value)
            }
          /**
           * <code>int64 cur_rate = 7;</code>
           */
          fun clearCurRate() {
            _builder.clearCurRate()
          }

          /**
           * <code>int64 avg_rate = 8;</code>
           */
          var avgRate: kotlin.Long
            @JvmName("getAvgRate")
            get() = _builder.getAvgRate()
            @JvmName("setAvgRate")
            set(value) {
              _builder.setAvgRate(value)
            }
          /**
           * <code>int64 avg_rate = 8;</code>
           */
          fun clearAvgRate() {
            _builder.clearAvgRate()
          }

          /**
           * <code>int64 peak_rate = 9;</code>
           */
          var peakRate: kotlin.Long
            @JvmName("getPeakRate")
            get() = _builder.getPeakRate()
            @JvmName("setPeakRate")
            set(value) {
              _builder.setPeakRate(value)
            }
          /**
           * <code>int64 peak_rate = 9;</code>
           */
          fun clearPeakRate() {
            _builder.clearPeakRate()
          }

          /**
           * <code>int64 bytes_rem = 10;</code>
           */
          var bytesRem: kotlin.Long
            @JvmName("getBytesRem")
            get() = _builder.getBytesRem()
            @JvmName("setBytesRem")
            set(value) {
              _builder.setBytesRem(value)
            }
          /**
           * <code>int64 bytes_rem = 10;</code>
           */
          fun clearBytesRem() {
            _builder.clearBytesRem()
          }

          /**
           * <code>int64 time_rem = 11;</code>
           */
          var timeRem: kotlin.Long
            @JvmName("getTimeRem")
            get() = _builder.getTimeRem()
            @JvmName("setTimeRem")
            set(value) {
              _builder.setTimeRem(value)
            }
          /**
           * <code>int64 time_rem = 11;</code>
           */
          fun clearTimeRem() {
            _builder.clearTimeRem()
          }

          /**
           * <code>uint64 progress = 12;</code>
           */
          var progress: kotlin.Long
            @JvmName("getProgress")
            get() = _builder.getProgress()
            @JvmName("setProgress")
            set(value) {
              _builder.setProgress(value)
            }
          /**
           * <code>uint64 progress = 12;</code>
           */
          fun clearProgress() {
            _builder.clearProgress()
          }
        }
      }
      @kotlin.jvm.JvmSynthetic
      inline fun channel(block: counters.minter.grpc.client.NetInfoResponseKt.PeerKt.ConnectionStatusKt.ChannelKt.Dsl.() -> Unit): counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel =
        counters.minter.grpc.client.NetInfoResponseKt.PeerKt.ConnectionStatusKt.ChannelKt.Dsl._create(counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel.newBuilder()).apply { block() }._build()
      object ChannelKt {
        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
        @com.google.protobuf.kotlin.ProtoDslMarker
        class Dsl private constructor(
          @kotlin.jvm.JvmField private val _builder: counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel.Builder
        ) {
          companion object {
            @kotlin.jvm.JvmSynthetic
            @kotlin.PublishedApi
            internal fun _create(builder: counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel.Builder): Dsl = Dsl(builder)
          }

          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _build(): counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel = _builder.build()

          /**
           * <code>int64 id = 5;</code>
           */
          var id: kotlin.Long
            @JvmName("getId")
            get() = _builder.getId()
            @JvmName("setId")
            set(value) {
              _builder.setId(value)
            }
          /**
           * <code>int64 id = 5;</code>
           */
          fun clearId() {
            _builder.clearId()
          }

          /**
           * <code>int64 send_queue_capacity = 1;</code>
           */
          var sendQueueCapacity: kotlin.Long
            @JvmName("getSendQueueCapacity")
            get() = _builder.getSendQueueCapacity()
            @JvmName("setSendQueueCapacity")
            set(value) {
              _builder.setSendQueueCapacity(value)
            }
          /**
           * <code>int64 send_queue_capacity = 1;</code>
           */
          fun clearSendQueueCapacity() {
            _builder.clearSendQueueCapacity()
          }

          /**
           * <code>int64 send_queue_size = 2;</code>
           */
          var sendQueueSize: kotlin.Long
            @JvmName("getSendQueueSize")
            get() = _builder.getSendQueueSize()
            @JvmName("setSendQueueSize")
            set(value) {
              _builder.setSendQueueSize(value)
            }
          /**
           * <code>int64 send_queue_size = 2;</code>
           */
          fun clearSendQueueSize() {
            _builder.clearSendQueueSize()
          }

          /**
           * <code>int64 priority = 3;</code>
           */
          var priority: kotlin.Long
            @JvmName("getPriority")
            get() = _builder.getPriority()
            @JvmName("setPriority")
            set(value) {
              _builder.setPriority(value)
            }
          /**
           * <code>int64 priority = 3;</code>
           */
          fun clearPriority() {
            _builder.clearPriority()
          }

          /**
           * <code>int64 recently_sent = 4;</code>
           */
          var recentlySent: kotlin.Long
            @JvmName("getRecentlySent")
            get() = _builder.getRecentlySent()
            @JvmName("setRecentlySent")
            set(value) {
              _builder.setRecentlySent(value)
            }
          /**
           * <code>int64 recently_sent = 4;</code>
           */
          fun clearRecentlySent() {
            _builder.clearRecentlySent()
          }
        }
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun counters.minter.grpc.client.NetInfoResponse.copy(block: counters.minter.grpc.client.NetInfoResponseKt.Dsl.() -> Unit): counters.minter.grpc.client.NetInfoResponse =
  counters.minter.grpc.client.NetInfoResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun counters.minter.grpc.client.NetInfoResponse.Peer.copy(block: counters.minter.grpc.client.NetInfoResponseKt.PeerKt.Dsl.() -> Unit): counters.minter.grpc.client.NetInfoResponse.Peer =
  counters.minter.grpc.client.NetInfoResponseKt.PeerKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.copy(block: counters.minter.grpc.client.NetInfoResponseKt.PeerKt.ConnectionStatusKt.Dsl.() -> Unit): counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus =
  counters.minter.grpc.client.NetInfoResponseKt.PeerKt.ConnectionStatusKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Monitor.copy(block: counters.minter.grpc.client.NetInfoResponseKt.PeerKt.ConnectionStatusKt.MonitorKt.Dsl.() -> Unit): counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Monitor =
  counters.minter.grpc.client.NetInfoResponseKt.PeerKt.ConnectionStatusKt.MonitorKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel.copy(block: counters.minter.grpc.client.NetInfoResponseKt.PeerKt.ConnectionStatusKt.ChannelKt.Dsl.() -> Unit): counters.minter.grpc.client.NetInfoResponse.Peer.ConnectionStatus.Channel =
  counters.minter.grpc.client.NetInfoResponseKt.PeerKt.ConnectionStatusKt.ChannelKt.Dsl._create(this.toBuilder()).apply { block() }._build()
